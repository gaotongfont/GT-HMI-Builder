<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\out\hmi_mod_mcu.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\out\hmi_mod_mcu.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6160001: Last Updated: Sat Sep 14 17:39:32 2024
<BR><P>
<H3>Maximum Stack Usage =       1576 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
_gt_png_open &rArr; lodepng_decode32 &rArr; lodepng_decode_memory &rArr; lodepng_decode &rArr; readChunk_iTXt &rArr; lodepng_zlib_decompressv &rArr; lodepng_inflatev &rArr; HuffmanTree_makeFromLengths &rArr; _mem_malloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[a]">UART0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">UART0_Handler</a><BR>
 <LI><a href="#[b]">UART1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">UART1_Handler</a><BR>
 <LI><a href="#[c]">TIMR0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">TIMR0_Handler</a><BR>
 <LI><a href="#[d]">TIMR1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">TIMR1_Handler</a><BR>
 <LI><a href="#[e]">DMA_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">DMA_Handler</a><BR>
 <LI><a href="#[f]">SPI0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">SPI0_Handler</a><BR>
 <LI><a href="#[10]">PWM0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">PWM0_Handler</a><BR>
 <LI><a href="#[11]">WDT_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">WDT_Handler</a><BR>
 <LI><a href="#[12]">UART2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">UART2_Handler</a><BR>
 <LI><a href="#[13]">PWM1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">PWM1_Handler</a><BR>
 <LI><a href="#[14]">ADC0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">ADC0_Handler</a><BR>
 <LI><a href="#[15]">BTIMR0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">BTIMR0_Handler</a><BR>
 <LI><a href="#[16]">HALL0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">HALL0_Handler</a><BR>
 <LI><a href="#[17]">PWM2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">PWM2_Handler</a><BR>
 <LI><a href="#[18]">PWMBRK_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">PWMBRK_Handler</a><BR>
 <LI><a href="#[19]">I2C0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">I2C0_Handler</a><BR>
 <LI><a href="#[1a]">CAN0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">CAN0_Handler</a><BR>
 <LI><a href="#[1b]">SPI1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">SPI1_Handler</a><BR>
 <LI><a href="#[1c]">RTC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">RTC_Handler</a><BR>
 <LI><a href="#[1d]">PWM3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">PWM3_Handler</a><BR>
 <LI><a href="#[1e]">TIMR2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">TIMR2_Handler</a><BR>
 <LI><a href="#[20]">TIMR3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">TIMR3_Handler</a><BR>
 <LI><a href="#[21]">ADC1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21]">ADC1_Handler</a><BR>
 <LI><a href="#[22]">BOD_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22]">BOD_Handler</a><BR>
 <LI><a href="#[23]">CORDIC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23]">CORDIC_Handler</a><BR>
 <LI><a href="#[24]">BTIMR1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">BTIMR1_Handler</a><BR>
 <LI><a href="#[25]">PWM4_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25]">PWM4_Handler</a><BR>
 <LI><a href="#[26]">HALL3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26]">HALL3_Handler</a><BR>
 <LI><a href="#[27]">BTIMR2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[27]">BTIMR2_Handler</a><BR>
 <LI><a href="#[28]">I2C1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[28]">I2C1_Handler</a><BR>
 <LI><a href="#[29]">BTIMR3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[29]">BTIMR3_Handler</a><BR>
 <LI><a href="#[2a]">ACMP_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a]">ACMP_Handler</a><BR>
 <LI><a href="#[2b]">XTALSTOP_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2b]">XTALSTOP_Handler</a><BR>
 <LI><a href="#[2c]">FSPI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2c]">FSPI_Handler</a><BR>
 <LI><a href="#[2d]">GPIOA_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2d]">GPIOA_Handler</a><BR>
 <LI><a href="#[2e]">GPIOB_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2e]">GPIOB_Handler</a><BR>
 <LI><a href="#[2f]">GPIOC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2f]">GPIOC_Handler</a><BR>
 <LI><a href="#[31]">GPIOM_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[31]">GPIOM_Handler</a><BR>
 <LI><a href="#[32]">GPION_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[32]">GPION_Handler</a><BR>
 <LI><a href="#[33]">GPIOA0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[33]">GPIOA0_Handler</a><BR>
 <LI><a href="#[34]">GPIOA1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[34]">GPIOA1_Handler</a><BR>
 <LI><a href="#[35]">GPIOA5_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[35]">GPIOA5_Handler</a><BR>
 <LI><a href="#[36]">GPIOA6_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[36]">GPIOA6_Handler</a><BR>
 <LI><a href="#[37]">GPIOA10_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[37]">GPIOA10_Handler</a><BR>
 <LI><a href="#[38]">GPIOA11_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[38]">GPIOA11_Handler</a><BR>
 <LI><a href="#[39]">GPIOA12_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[39]">GPIOA12_Handler</a><BR>
 <LI><a href="#[3a]">GPIOA13_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3a]">GPIOA13_Handler</a><BR>
 <LI><a href="#[3b]">GPIOB0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3b]">GPIOB0_Handler</a><BR>
 <LI><a href="#[3c]">GPIOB1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3c]">GPIOB1_Handler</a><BR>
 <LI><a href="#[3d]">GPIOB2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3d]">GPIOB2_Handler</a><BR>
 <LI><a href="#[3e]">GPIOC0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3e]">GPIOC0_Handler</a><BR>
 <LI><a href="#[3f]">GPIOC1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3f]">GPIOC1_Handler</a><BR>
 <LI><a href="#[40]">GPIOC2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[40]">GPIOC2_Handler</a><BR>
 <LI><a href="#[41]">GPIOC3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[41]">GPIOC3_Handler</a><BR>
 <LI><a href="#[42]">GPIOC4_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[42]">GPIOC4_Handler</a><BR>
 <LI><a href="#[43]">GPIOD3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[43]">GPIOD3_Handler</a><BR>
 <LI><a href="#[44]">GPIOD4_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[44]">GPIOD4_Handler</a><BR>
 <LI><a href="#[45]">GPIOD5_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[45]">GPIOD5_Handler</a><BR>
 <LI><a href="#[46]">GPIOD6_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[46]">GPIOD6_Handler</a><BR>
 <LI><a href="#[47]">GPIOD7_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[47]">GPIOD7_Handler</a><BR>
 <LI><a href="#[48]">GPIOD8_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[48]">GPIOD8_Handler</a><BR>
 <LI><a href="#[49]">GPIOC9_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[49]">GPIOC9_Handler</a><BR>
 <LI><a href="#[4a]">GPIOC10_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4a]">GPIOC10_Handler</a><BR>
 <LI><a href="#[4b]">GPIOC11_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4b]">GPIOC11_Handler</a><BR>
 <LI><a href="#[4c]">GPIOC12_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4c]">GPIOC12_Handler</a><BR>
 <LI><a href="#[4d]">GPIOM0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4d]">GPIOM0_Handler</a><BR>
 <LI><a href="#[4e]">GPIOM1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4e]">GPIOM1_Handler</a><BR>
 <LI><a href="#[4f]">GPIOM2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4f]">GPIOM2_Handler</a><BR>
 <LI><a href="#[50]">GPIOM3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[50]">GPIOM3_Handler</a><BR>
 <LI><a href="#[51]">GPIOM4_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[51]">GPIOM4_Handler</a><BR>
 <LI><a href="#[52]">DIV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[52]">DIV_Handler</a><BR>
 <LI><a href="#[54]">GPIOE_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[54]">GPIOE_Handler</a><BR>
 <LI><a href="#[55]">JPEG_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[55]">JPEG_Handler</a><BR>
 <LI><a href="#[56]">SDIO_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[56]">SDIO_Handler</a><BR>
 <LI><a href="#[57]">USB_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[57]">USB_Handler</a><BR>
 <LI><a href="#[58]">CAN1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[58]">CAN1_Handler</a><BR>
 <LI><a href="#[5a]">BTIMR4_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5a]">BTIMR4_Handler</a><BR>
 <LI><a href="#[5b]">BTIMR5_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5b]">BTIMR5_Handler</a><BR>
 <LI><a href="#[5c]">BTIMR6_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5c]">BTIMR6_Handler</a><BR>
 <LI><a href="#[5d]">BTIMR7_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5d]">BTIMR7_Handler</a><BR>
 <LI><a href="#[5e]">BTIMR8_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5e]">BTIMR8_Handler</a><BR>
 <LI><a href="#[5f]">BTIMR9_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5f]">BTIMR9_Handler</a><BR>
 <LI><a href="#[60]">BTIMR10_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[60]">BTIMR10_Handler</a><BR>
 <LI><a href="#[61]">BTIMR11_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[61]">BTIMR11_Handler</a><BR>
 <LI><a href="#[62]">DMA2D_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[62]">DMA2D_Handler</a><BR>
 <LI><a href="#[63]">QEI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[63]">QEI_Handler</a><BR>
 <LI><a href="#[121]">_destroy_and_free_children</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[121]">_destroy_and_free_children</a><BR>
 <LI><a href="#[150]">_gt_obj_next_focus_get</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[150]">_gt_obj_next_focus_get</a><BR>
 <LI><a href="#[14d]">_gt_obj_foreach_clicked</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14d]">_gt_obj_foreach_clicked</a><BR>
 <LI><a href="#[14c]">_gt_obj_focus_clicked</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14c]">_gt_obj_focus_clicked</a><BR>
 <LI><a href="#[129]">_find_showing_recursive_by_type</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[129]">_find_showing_recursive_by_type</a><BR>
 <LI><a href="#[14f]">_gt_obj_move_child_by</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14f]">_gt_obj_move_child_by</a><BR>
 <LI><a href="#[1e3]">gt_obj_child_set_prop</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e3]">gt_obj_child_set_prop</a><BR>
 <LI><a href="#[177]">_row_grow_inside_invert</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[177]">_row_grow_inside_invert</a><BR>
 <LI><a href="#[172]">_row_grow_inside</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[172]">_row_grow_inside</a><BR>
 <LI><a href="#[118]">_check_and_copy_foreach</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[118]">_check_and_copy_foreach</a><BR>
 <LI><a href="#[113]">_calc_max_area_recursive</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[113]">_calc_max_area_recursive</a><BR>
 <LI><a href="#[18e]">color_tree_cleanup</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18e]">color_tree_cleanup</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2a]">ACMP_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[14]">ADC0_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[21]">ADC1_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[22]">BOD_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[15]">BTIMR0_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[60]">BTIMR10_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[61]">BTIMR11_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[24]">BTIMR1_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[27]">BTIMR2_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[29]">BTIMR3_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[5a]">BTIMR4_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[5b]">BTIMR5_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[5c]">BTIMR6_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[5d]">BTIMR7_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[5e]">BTIMR8_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[5f]">BTIMR9_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[1a]">CAN0_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[58]">CAN1_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[23]">CORDIC_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[52]">DIV_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[62]">DMA2D_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[e]">DMA_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[65]">FPU_Enable</a> from system_swm341.o(.text.FPU_Enable) referenced from startup_swm341.o(.text)
 <LI><a href="#[2c]">FSPI_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[33]">GPIOA0_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[37]">GPIOA10_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[38]">GPIOA11_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[39]">GPIOA12_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[3a]">GPIOA13_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[34]">GPIOA1_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[35]">GPIOA5_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[36]">GPIOA6_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[2d]">GPIOA_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[3b]">GPIOB0_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[3c]">GPIOB1_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[3d]">GPIOB2_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[2e]">GPIOB_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[3e]">GPIOC0_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[4a]">GPIOC10_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[4b]">GPIOC11_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[4c]">GPIOC12_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[3f]">GPIOC1_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[40]">GPIOC2_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[41]">GPIOC3_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[42]">GPIOC4_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[49]">GPIOC9_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[2f]">GPIOC_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[43]">GPIOD3_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[44]">GPIOD4_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[45]">GPIOD5_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[46]">GPIOD6_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[47]">GPIOD7_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[48]">GPIOD8_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[30]">GPIOD_Handler</a> from dev_touch.o(.text.GPIOD_Handler) referenced from startup_swm341.o(RESET)
 <LI><a href="#[54]">GPIOE_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[4d]">GPIOM0_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[4e]">GPIOM1_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[4f]">GPIOM2_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[50]">GPIOM3_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[51]">GPIOM4_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[31]">GPIOM_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[32]">GPION_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[ac]">GT_GetChinese</a> from gt_gui_driver.o(.text) referenced from gt_gui_driver.o(.rodata.gt_get_font_func)
 <LI><a href="#[16]">HALL0_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[26]">HALL3_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[19]">I2C0_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[28]">I2C1_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[55]">JPEG_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[53]">LCD_Handler</a> from bsp_lcd_rgb.o(.text.LCD_Handler) referenced from startup_swm341.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[10]">PWM0_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[13]">PWM1_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[17]">PWM2_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[1d]">PWM3_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[25]">PWM4_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[18]">PWMBRK_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[63]">QEI_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[1c]">RTC_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[56]">SDIO_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[f]">SPI0_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[1b]">SPI1_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from dev_systick.o(.text.SysTick_Handler) referenced from startup_swm341.o(RESET)
 <LI><a href="#[c]">TIMR0_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[d]">TIMR1_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[1e]">TIMR2_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[20]">TIMR3_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[59]">TIMR4_Handler</a> from main.o(.text.TIMR4_Handler) referenced from startup_swm341.o(RESET)
 <LI><a href="#[a]">UART0_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[b]">UART1_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[12]">UART2_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[1f]">UART3_Handler</a> from bsp_uart.o(.text.UART3_Handler) referenced from startup_swm341.o(RESET)
 <LI><a href="#[57]">USB_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[11]">WDT_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[2b]">XTALSTOP_Handler</a> from startup_swm341.o(.text) referenced from startup_swm341.o(RESET)
 <LI><a href="#[66]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_swm341.o(.text)
 <LI><a href="#[8c]">_auto_play_callback</a> from gt_player.o(.text._auto_play_callback) referenced 2 times from gt_player.o(.text.gt_player_create)
 <LI><a href="#[9c]">_close_cb</a> from gt_hal_src.o(.text._close_cb) referenced 2 times from gt_hal_src.o(.text.gt_src_init)
 <LI><a href="#[a1]">_close_cb</a> from gt_hal_vf.o(.text._close_cb) referenced 2 times from gt_hal_vf.o(.text.gt_vf_init)
 <LI><a href="#[6e]">_default_equal_cb</a> from gt_vector.o(.text._default_equal_cb) referenced 2 times from gt_vector.o(.text._gt_vector_create)
 <LI><a href="#[ae]">_deinit_cb</a> from gt_img.o(.text._deinit_cb) referenced from gt_img.o(.rodata.gt_img_class)
 <LI><a href="#[b1]">_deinit_cb</a> from gt_imgbtn.o(.text._deinit_cb) referenced from gt_imgbtn.o(.rodata.gt_imgbtn_class)
 <LI><a href="#[b6]">_deinit_cb</a> from gt_player.o(.text._deinit_cb) referenced from gt_player.o(.rodata.gt_player_class)
 <LI><a href="#[96]">_equal_current_id_cb</a> from gt_scr_stack.o(.text._equal_current_id_cb) referenced 2 times from gt_scr_stack.o(.text.gt_scr_stack_has_before)
 <LI><a href="#[af]">_event_cb</a> from gt_img.o(.text._event_cb) referenced from gt_img.o(.rodata.gt_img_class)
 <LI><a href="#[b2]">_event_cb</a> from gt_imgbtn.o(.text._event_cb) referenced from gt_imgbtn.o(.rodata.gt_imgbtn_class)
 <LI><a href="#[b7]">_event_cb</a> from gt_player.o(.text._event_cb) referenced from gt_player.o(.rodata.gt_player_class)
 <LI><a href="#[91]">_flush_cb</a> from main.o(.text._flush_cb) referenced 2 times from gt_port_disp.o(.text.gt_port_disp_init)
 <LI><a href="#[95]">_free_alive_scr_object_cb</a> from gt_scr_stack.o(.text._free_alive_scr_object_cb) referenced 2 times from gt_scr_stack.o(.text.gt_scr_stack_clear)
 <LI><a href="#[ab]">_gt_anim_path_bounce</a> from gt_anim.o(.text._gt_anim_path_bounce) referenced from gt_anim.o(.rodata..Lswitch.table.gt_anim_set_path_type)
 <LI><a href="#[a7]">_gt_anim_path_ease_in</a> from gt_anim.o(.text._gt_anim_path_ease_in) referenced from gt_anim.o(.rodata..Lswitch.table.gt_anim_set_path_type)
 <LI><a href="#[a9]">_gt_anim_path_ease_in_out</a> from gt_anim.o(.text._gt_anim_path_ease_in_out) referenced from gt_anim.o(.rodata..Lswitch.table.gt_anim_set_path_type)
 <LI><a href="#[a8]">_gt_anim_path_ease_out</a> from gt_anim.o(.text._gt_anim_path_ease_out) referenced from gt_anim.o(.rodata..Lswitch.table.gt_anim_set_path_type)
 <LI><a href="#[6f]">_gt_anim_path_linear</a> from gt_anim.o(.text._gt_anim_path_linear) referenced 2 times from gt_anim.o(.text.gt_anim_init)
 <LI><a href="#[6f]">_gt_anim_path_linear</a> from gt_anim.o(.text._gt_anim_path_linear) referenced 2 times from gt_anim.o(.text.gt_anim_set_path_type)
 <LI><a href="#[aa]">_gt_anim_path_overshoot</a> from gt_anim.o(.text._gt_anim_path_overshoot) referenced from gt_anim.o(.rodata..Lswitch.table.gt_anim_set_path_type)
 <LI><a href="#[67]">_gt_anim_task_handler</a> from gt_anim.o(.text._gt_anim_task_handler) referenced 2 times from gt_anim.o(.text._gt_anim_core_init)
 <LI><a href="#[70]">_gt_disp_task_handler</a> from gt_hal_disp.o(.text._gt_disp_task_handler) referenced 2 times from gt_hal_disp.o(.text.gt_disp_drv_register)
 <LI><a href="#[6b]">_gt_img_decoder_built_in_close</a> from gt_img_decoder.o(.text._gt_img_decoder_built_in_close) referenced 2 times from gt_img_decoder.o(.text._gt_img_decoder_init)
 <LI><a href="#[68]">_gt_img_decoder_built_in_info</a> from gt_img_decoder.o(.text._gt_img_decoder_built_in_info) referenced 2 times from gt_img_decoder.o(.text._gt_img_decoder_init)
 <LI><a href="#[69]">_gt_img_decoder_built_in_open</a> from gt_img_decoder.o(.text._gt_img_decoder_built_in_open) referenced 2 times from gt_img_decoder.o(.text._gt_img_decoder_init)
 <LI><a href="#[6a]">_gt_img_decoder_built_in_read_line</a> from gt_img_decoder.o(.text._gt_img_decoder_built_in_read_line) referenced 2 times from gt_img_decoder.o(.text._gt_img_decoder_init)
 <LI><a href="#[88]">_gt_obj_destroy_handler_cb</a> from gt_obj.o(.text._gt_obj_destroy_handler_cb) referenced 2 times from gt_obj.o(.text.gt_obj_destroy)
 <LI><a href="#[90]">_gt_png_close</a> from gt_png.o(.text._gt_png_close) referenced 2 times from gt_png.o(.text.gt_png_init)
 <LI><a href="#[8d]">_gt_png_info</a> from gt_png.o(.text._gt_png_info) referenced 2 times from gt_png.o(.text.gt_png_init)
 <LI><a href="#[8e]">_gt_png_open</a> from gt_png.o(.text._gt_png_open) referenced 2 times from gt_png.o(.text.gt_png_init)
 <LI><a href="#[8f]">_gt_png_read_line</a> from gt_png.o(.text._gt_png_read_line) referenced 2 times from gt_png.o(.text.gt_png_init)
 <LI><a href="#[9a]">_gt_sjpg_close</a> from gt_sjpg.o(.text._gt_sjpg_close) referenced 2 times from gt_sjpg.o(.text.gt_sjpg_init)
 <LI><a href="#[97]">_gt_sjpg_info</a> from gt_sjpg.o(.text._gt_sjpg_info) referenced 2 times from gt_sjpg.o(.text.gt_sjpg_init)
 <LI><a href="#[98]">_gt_sjpg_open</a> from gt_sjpg.o(.text._gt_sjpg_open) referenced 2 times from gt_sjpg.o(.text.gt_sjpg_init)
 <LI><a href="#[99]">_gt_sjpg_read_line</a> from gt_sjpg.o(.text._gt_sjpg_read_line) referenced 2 times from gt_sjpg.o(.text.gt_sjpg_init)
 <LI><a href="#[77]">_imgs_equal_cb</a> from gt_imgbtn.o(.text._imgs_equal_cb) referenced 2 times from gt_imgbtn.o(.text.gt_imgbtn_create)
 <LI><a href="#[78]">_imgs_free_cb</a> from gt_imgbtn.o(.text._imgs_free_cb) referenced 2 times from gt_imgbtn.o(.text.gt_imgbtn_create)
 <LI><a href="#[7a]">_indev_scroll_throw_exec_cb</a> from gt_indev.o(.text._indev_scroll_throw_exec_cb) referenced 2 times from gt_indev.o(.text.gt_indev_handler)
 <LI><a href="#[7b]">_indev_scroll_throw_ready_cb</a> from gt_indev.o(.text._indev_scroll_throw_ready_cb) referenced 2 times from gt_indev.o(.text.gt_indev_handler)
 <LI><a href="#[ad]">_init_cb</a> from gt_img.o(.text._init_cb) referenced from gt_img.o(.rodata.gt_img_class)
 <LI><a href="#[b0]">_init_cb</a> from gt_imgbtn.o(.text._init_cb) referenced from gt_imgbtn.o(.rodata.gt_imgbtn_class)
 <LI><a href="#[b3]">_init_cb</a> from gt_obj.o(.text._init_cb) referenced from gt_obj.o(.rodata.gt_obj_class)
 <LI><a href="#[b5]">_init_cb</a> from gt_player.o(.text._init_cb) referenced from gt_player.o(.rodata.gt_player_class)
 <LI><a href="#[b4]">_obj_event_cb</a> from gt_obj.o(.text._obj_event_cb) referenced from gt_obj.o(.rodata.gt_obj_class)
 <LI><a href="#[71]">_old_scr_anim_ready_cb</a> from gt_disp.o(.text._old_scr_anim_ready_cb) referenced 2 times from gt_disp.o(.text.gt_disp_load_scr_anim)
 <LI><a href="#[9b]">_open_cb</a> from gt_hal_src.o(.text._open_cb) referenced 2 times from gt_hal_src.o(.text.gt_src_init)
 <LI><a href="#[a0]">_open_cb</a> from gt_hal_vf.o(.text._open_cb) referenced 2 times from gt_hal_vf.o(.text.gt_vf_init)
 <LI><a href="#[9d]">_read_cb</a> from gt_hal_src.o(.text._read_cb) referenced 2 times from gt_hal_src.o(.text.gt_src_init)
 <LI><a href="#[a2]">_read_cb</a> from gt_hal_vf.o(.text._read_cb) referenced 2 times from gt_hal_vf.o(.text.gt_vf_init)
 <LI><a href="#[75]">_scr_anim_del_ready_cb</a> from gt_disp.o(.text._scr_anim_del_ready_cb) referenced 2 times from gt_disp.o(.text.gt_disp_load_scr_anim)
 <LI><a href="#[74]">_scr_anim_exec_x_cb</a> from gt_disp.o(.text._scr_anim_exec_x_cb) referenced 8 times from gt_disp.o(.text.gt_disp_load_scr_anim)
 <LI><a href="#[76]">_scr_anim_exec_y_cb</a> from gt_disp.o(.text._scr_anim_exec_y_cb) referenced 8 times from gt_disp.o(.text.gt_disp_load_scr_anim)
 <LI><a href="#[73]">_scr_anim_ready_cb</a> from gt_disp.o(.text._scr_anim_ready_cb) referenced 2 times from gt_disp.o(.text.gt_disp_load_scr_anim)
 <LI><a href="#[72]">_scr_anim_start_cb</a> from gt_disp.o(.text._scr_anim_start_cb) referenced 2 times from gt_disp.o(.text.gt_disp_load_scr_anim)
 <LI><a href="#[b9]">_screen_event_cb</a> from gt_obj.o(.text._screen_event_cb) referenced from gt_obj.o(.rodata.gt_screen_class)
 <LI><a href="#[8a]">_scroll_by_x</a> from gt_obj_scroll.o(.text._scroll_by_x) referenced 4 times from gt_obj_scroll.o(.text.gt_obj_scroll_to)
 <LI><a href="#[8b]">_scroll_by_y</a> from gt_obj_scroll.o(.text._scroll_by_y) referenced 4 times from gt_obj_scroll.o(.text.gt_obj_scroll_to)
 <LI><a href="#[89]">_scroll_ready_cb</a> from gt_obj_scroll.o(.text._scroll_ready_cb) referenced 2 times from gt_obj_scroll.o(.text.gt_obj_scroll_to)
 <LI><a href="#[9e]">_seek_cb</a> from gt_hal_src.o(.text._seek_cb) referenced 2 times from gt_hal_src.o(.text.gt_src_init)
 <LI><a href="#[a4]">_seek_cb</a> from gt_hal_vf.o(.text._seek_cb) referenced 2 times from gt_hal_vf.o(.text.gt_vf_init)
 <LI><a href="#[9f]">_tell_cb</a> from gt_hal_src.o(.text._tell_cb) referenced 2 times from gt_hal_src.o(.text.gt_src_init)
 <LI><a href="#[a5]">_tell_cb</a> from gt_hal_vf.o(.text._tell_cb) referenced 2 times from gt_hal_vf.o(.text.gt_vf_init)
 <LI><a href="#[a3]">_write_cb</a> from gt_hal_vf.o(.text._write_cb) referenced 2 times from gt_hal_vf.o(.text.gt_vf_init)
 <LI><a href="#[a6]">fputc</a> from bsp_uart.o(.text.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[79]">gt_indev_handler</a> from gt_indev.o(.text.gt_indev_handler) referenced 2 times from gt_hal_indev.o(.text.gt_indev_drv_register)
 <LI><a href="#[b8]">gt_init_screen_home</a> from gt_init_screen_home.o(.text.gt_init_screen_home) referenced from gt_ui.o(.rodata.gt_scr_list)
 <LI><a href="#[84]">imgbtn10_0_cb</a> from gt_init_screen_home.o(.text.imgbtn10_0_cb) referenced 2 times from gt_init_screen_home.o(.text.gt_init_screen_home)
 <LI><a href="#[85]">imgbtn11_0_cb</a> from gt_init_screen_home.o(.text.imgbtn11_0_cb) referenced 2 times from gt_init_screen_home.o(.text.gt_init_screen_home)
 <LI><a href="#[86]">imgbtn12_0_cb</a> from gt_init_screen_home.o(.text.imgbtn12_0_cb) referenced 2 times from gt_init_screen_home.o(.text.gt_init_screen_home)
 <LI><a href="#[87]">imgbtn13_0_cb</a> from gt_init_screen_home.o(.text.imgbtn13_0_cb) referenced 2 times from gt_init_screen_home.o(.text.gt_init_screen_home)
 <LI><a href="#[7c]">imgbtn1_0_cb</a> from gt_init_screen_home.o(.text.imgbtn1_0_cb) referenced 2 times from gt_init_screen_home.o(.text.gt_init_screen_home)
 <LI><a href="#[7d]">imgbtn1_1_cb</a> from gt_init_screen_home.o(.text.imgbtn1_1_cb) referenced 2 times from gt_init_screen_home.o(.text.gt_init_screen_home)
 <LI><a href="#[7e]">imgbtn2_0_cb</a> from gt_init_screen_home.o(.text.imgbtn2_0_cb) referenced 2 times from gt_init_screen_home.o(.text.gt_init_screen_home)
 <LI><a href="#[7f]">imgbtn2_1_cb</a> from gt_init_screen_home.o(.text.imgbtn2_1_cb) referenced 2 times from gt_init_screen_home.o(.text.gt_init_screen_home)
 <LI><a href="#[80]">imgbtn5_0_cb</a> from gt_init_screen_home.o(.text.imgbtn5_0_cb) referenced 2 times from gt_init_screen_home.o(.text.gt_init_screen_home)
 <LI><a href="#[81]">imgbtn5_1_cb</a> from gt_init_screen_home.o(.text.imgbtn5_1_cb) referenced 2 times from gt_init_screen_home.o(.text.gt_init_screen_home)
 <LI><a href="#[82]">imgbtn6_0_cb</a> from gt_init_screen_home.o(.text.imgbtn6_0_cb) referenced 2 times from gt_init_screen_home.o(.text.gt_init_screen_home)
 <LI><a href="#[83]">imgbtn6_1_cb</a> from gt_init_screen_home.o(.text.imgbtn6_1_cb) referenced 2 times from gt_init_screen_home.o(.text.gt_init_screen_home)
 <LI><a href="#[6c]">input_func</a> from gt_sjpg.o(.text.input_func) referenced 2 times from gt_sjpg.o(.text._gt_sjpg_info)
 <LI><a href="#[6c]">input_func</a> from gt_sjpg.o(.text.input_func) referenced 2 times from gt_sjpg.o(.text._gt_sjpg_open)
 <LI><a href="#[6c]">input_func</a> from gt_sjpg.o(.text.input_func) referenced 2 times from gt_sjpg.o(.text._gt_sjpg_read_line)
 <LI><a href="#[64]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[6d]">output_func</a> from gt_sjpg.o(.text.output_func) referenced 2 times from gt_sjpg.o(.text._gt_sjpg_read_line)
 <LI><a href="#[92]">read_cb</a> from main.o(.text.read_cb) referenced 2 times from gt_port_indev.o(.text.gt_port_indev_init)
 <LI><a href="#[93]">read_cb_btn</a> from main.o(.text.read_cb_btn) referenced 2 times from gt_port_indev.o(.text.gt_port_indev_init)
 <LI><a href="#[94]">spi_wr</a> from main.o(.text.spi_wr) referenced 2 times from gt_port_vf.o(.text.gt_port_vf_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[66]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(.text)
</UL>
<P><STRONG><a name="[22d]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[ba]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[dc]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[22e]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[22f]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[230]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[231]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[232]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>UART0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>UART1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TIMR0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMR0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMR0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>TIMR1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMR1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMR1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>DMA_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>SPI0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>PWM0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>WDT_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>UART2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>PWM1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>ADC0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>BTIMR0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIMR0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIMR0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>HALL0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>PWM2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>PWMBRK_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMBRK_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMBRK_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>I2C0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>CAN0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SPI1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>RTC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>PWM3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>TIMR2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMR2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMR2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>TIMR3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMR3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMR3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>ADC1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>BOD_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOD_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOD_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CORDIC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORDIC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORDIC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>BTIMR1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIMR1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIMR1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>PWM4_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM4_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM4_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>HALL3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>BTIMR2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIMR2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIMR2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>I2C1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>BTIMR3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIMR3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIMR3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>ACMP_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>XTALSTOP_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XTALSTOP_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XTALSTOP_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>FSPI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSPI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSPI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>GPIOA_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOA_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOA_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>GPIOB_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOB_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOB_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>GPIOC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>GPIOM_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOM_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOM_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>GPION_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPION_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPION_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>GPIOA0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOA0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOA0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>GPIOA1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOA1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOA1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>GPIOA5_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOA5_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOA5_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>GPIOA6_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOA6_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOA6_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>GPIOA10_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOA10_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOA10_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>GPIOA11_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOA11_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOA11_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>GPIOA12_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOA12_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOA12_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>GPIOA13_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOA13_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOA13_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>GPIOB0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOB0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOB0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>GPIOB1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOB1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOB1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>GPIOB2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOB2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOB2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>GPIOC0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOC0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOC0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>GPIOC1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOC1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOC1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>GPIOC2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOC2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOC2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>GPIOC3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOC3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOC3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>GPIOC4_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOC4_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOC4_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>GPIOD3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOD3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOD3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>GPIOD4_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOD4_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOD4_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>GPIOD5_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOD5_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOD5_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>GPIOD6_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOD6_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOD6_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>GPIOD7_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOD7_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOD7_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>GPIOD8_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOD8_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOD8_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>GPIOC9_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOC9_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOC9_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>GPIOC10_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOC10_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOC10_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>GPIOC11_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOC11_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOC11_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>GPIOC12_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOC12_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOC12_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>GPIOM0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOM0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOM0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>GPIOM1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOM1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOM1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>GPIOM2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOM2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOM2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>GPIOM3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOM3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOM3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>GPIOM4_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOM4_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOM4_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DIV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>GPIOE_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOE_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOE_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>JPEG_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JPEG_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>SDIO_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>USB_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>CAN1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>BTIMR4_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIMR4_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIMR4_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>BTIMR5_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIMR5_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIMR5_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>BTIMR6_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIMR6_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIMR6_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>BTIMR7_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIMR7_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIMR7_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>BTIMR8_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIMR8_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIMR8_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>BTIMR9_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIMR9_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIMR9_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>BTIMR10_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIMR10_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIMR10_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>BTIMR11_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIMR11_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIMR11_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>DMA2D_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2D_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2D_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>QEI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm341.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[bc]"></a>GT_Font_Init</STRONG> (Thumb, 322 bytes, Stack size 176 bytes, gt_gui_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = GT_Font_Init &rArr; MD5Final &rArr; MD5Update &rArr; MD5Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_read_data
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Update
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Final
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[233]"></a>GT_Set_Chinese_Charset_Type</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gt_gui_driver.o(.text), UNUSED)

<P><STRONG><a name="[c6]"></a>GT_Get_Chinese_Charset_Type</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gt_gui_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT_GetChinese
</UL>

<P><STRONG><a name="[ac]"></a>GT_GetChinese</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, gt_gui_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GT_GetChinese &rArr; UnicodeToGBK &rArr; r_dat_bat &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_dat_bat
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnicodeToGBK
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT_Get_Chinese_Charset_Type
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB2312Offset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_gui_driver.o(.rodata.gt_get_font_func)
</UL>
<P><STRONG><a name="[c7]"></a>UnicodeToGBK</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, gt_gui_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UnicodeToGBK &rArr; r_dat_bat &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_dat_bat
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT_GetChinese
</UL>

<P><STRONG><a name="[ca]"></a>GBKToUnicode</STRONG> (Thumb, 282 bytes, Stack size 16 bytes, gt_gui_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_dat_bat
</UL>

<P><STRONG><a name="[234]"></a>GT_Get_Font_Width</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gt_gui_driver.o(.text), UNUSED)

<P><STRONG><a name="[235]"></a>GT_Get_Font_Height</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gt_gui_driver.o(.text), UNUSED)

<P><STRONG><a name="[236]"></a>GT_Check_Is_Vec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gt_gui_driver.o(.text), UNUSED)

<P><STRONG><a name="[cc]"></a>GT_Get_Font_Func_S</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, gt_gui_driver.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT_Get_Font_Type
</UL>

<P><STRONG><a name="[cb]"></a>GT_Get_Font_Type</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gt_gui_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT_Get_Font_Func_S
</UL>

<P><STRONG><a name="[237]"></a>GT_Font_Code_Transform</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gt_gui_driver.o(.text), UNUSED)

<P><STRONG><a name="[238]"></a>GT_Get_Font_Convertor_Data</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gt_gui_driver.o(.text), UNUSED)

<P><STRONG><a name="[1bf]"></a>tolower</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tolower.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_read_img_wh
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_open
</UL>

<P><STRONG><a name="[239]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[c3]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_dat_bat
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_wr
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flush_cb
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memcpy
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_convert
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_zTXt
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_tEXt
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_iTXt
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_inflatev
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_add_text_sized
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_add_itext_sized
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Update
</UL>

<P><STRONG><a name="[224]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_dat_bat
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_wr
</UL>

<P><STRONG><a name="[1e2]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memmove
</UL>

<P><STRONG><a name="[23a]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[23b]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[ce]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memset
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[23c]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[23d]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[be]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT_Font_Init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memset_0
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_convert
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_inflatev
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuffmanTree_makeFromLengths
</UL>

<P><STRONG><a name="[15a]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg_img
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_tlsf_create
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_inspect
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode_memory
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_convert
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jd_prepare
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jd_decomp
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_sjpg_open
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_sjpg_info
</UL>

<P><STRONG><a name="[221]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cf]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[151]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_get_ext
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_png_open
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_png_info
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_imgbtn_set_src_press
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_imgbtn_set_src
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_img_set_src
</UL>

<P><STRONG><a name="[11d]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_default_equal_cb
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_open_cb
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_open_cb
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_png_open
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_png_info
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_imgs_equal_cb
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_img_set_src
</UL>

<P><STRONG><a name="[c2]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT_Font_Init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memcmp
</UL>

<P><STRONG><a name="[1c5]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_imgbtn_set_src_press
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_img_set_src
</UL>

<P><STRONG><a name="[d0]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[d5]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[d6]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[d7]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[d8]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[23e]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[22c]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[d9]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[d1]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[23f]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[da]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[240]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[d2]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[241]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[242]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[d4]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[d3]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[db]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[229]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[bb]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[243]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[de]"></a>EXTI_Clear</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, swm341_exti.o(.text.EXTI_Clear))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOD_Handler
</UL>

<P><STRONG><a name="[dd]"></a>EXTI_State</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, swm341_exti.o(.text.EXTI_State))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOD_Handler
</UL>

<P><STRONG><a name="[65]"></a>FPU_Enable</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_swm341.o(.text.FPU_Enable))
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(.text)
</UL>
<P><STRONG><a name="[ff]"></a>Flash_Param_at_xMHz</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, swm341_flash.o(.text.Flash_Param_at_xMHz))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Flash_Param_at_xMHz
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[30]"></a>GPIOD_Handler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, dev_touch.o(.text.GPIOD_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIOD_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_State
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[e4]"></a>GPIO_ClrBit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, swm341_gpio.o(.text.GPIO_ClrBit))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_read_data
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Byte
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Byte
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_rgb_init
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_Init
</UL>

<P><STRONG><a name="[f0]"></a>GPIO_GetBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, swm341_gpio.o(.text.GPIO_GetBit))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Byte
</UL>

<P><STRONG><a name="[df]"></a>GPIO_Init</STRONG> (Thumb, 366 bytes, Stack size 32 bytes, swm341_gpio.o(.text.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GPIO_Init &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spi_io_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_rgb_init
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_Init
</UL>

<P><STRONG><a name="[e6]"></a>GPIO_SetBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, swm341_gpio.o(.text.GPIO_SetBit))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_read_data
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spi_io_config
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Byte
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Byte
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_rgb_init
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_Init
</UL>

<P><STRONG><a name="[e1]"></a>GT911_Init</STRONG> (Thumb, 420 bytes, Stack size 64 bytes, gt911.o(.text.GT911_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = GT911_Init &rArr; GPIO_Init &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Open
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_WR_Reg
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_RD_Reg
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBit
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClrBit
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swm_delay_ms
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e8]"></a>GT911_RD_Reg</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, gt911.o(.text.GT911_RD_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GT911_RD_Reg
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swm_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_Scan
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_Init
</UL>

<P><STRONG><a name="[ee]"></a>GT911_Scan</STRONG> (Thumb, 680 bytes, Stack size 40 bytes, gt911.o(.text.GT911_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GT911_Scan &rArr; GT911_RD_Reg
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_WR_Reg
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_RD_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cb
</UL>

<P><STRONG><a name="[e7]"></a>GT911_WR_Reg</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, gt911.o(.text.GT911_WR_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GT911_WR_Reg
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_Scan
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_Init
</UL>

<P><STRONG><a name="[ef]"></a>Get_Byte</STRONG> (Thumb, 298 bytes, Stack size 16 bytes, bsp_sfc.o(.text.Get_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Get_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetBit
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBit
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClrBit
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_read_data
</UL>

<P><STRONG><a name="[e2]"></a>I2C_Init</STRONG> (Thumb, 412 bytes, Stack size 24 bytes, swm341_i2c.o(.text.I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_Init
</UL>

<P><STRONG><a name="[e3]"></a>I2C_Open</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, swm341_i2c.o(.text.I2C_Open))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_Init
</UL>

<P><STRONG><a name="[ec]"></a>I2C_Read</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, swm341_i2c.o(.text.I2C_Read))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_RD_Reg
</UL>

<P><STRONG><a name="[ea]"></a>I2C_Start</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, swm341_i2c.o(.text.I2C_Start))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_WR_Reg
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_RD_Reg
</UL>

<P><STRONG><a name="[ed]"></a>I2C_Stop</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, swm341_i2c.o(.text.I2C_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_WR_Reg
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_RD_Reg
</UL>

<P><STRONG><a name="[eb]"></a>I2C_Write</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, swm341_i2c.o(.text.I2C_Write))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_WR_Reg
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_RD_Reg
</UL>

<P><STRONG><a name="[53]"></a>LCD_Handler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bsp_lcd_rgb.o(.text.LCD_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Start
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_INTClr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[f4]"></a>LCD_INTClr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, swm341_lcd.o(.text.LCD_INTClr))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Handler
</UL>

<P><STRONG><a name="[186]"></a>LCD_Init</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, swm341_lcd.o(.text.LCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_rgb_init
</UL>

<P><STRONG><a name="[f5]"></a>LCD_Start</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, swm341_lcd.o(.text.LCD_Start))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Handler
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_rgb_init
</UL>

<P><STRONG><a name="[f8]"></a>PLLInit</STRONG> (Thumb, 496 bytes, Stack size 16 bytes, system_swm341.o(.text.PLLInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PLLInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchToPLL
</UL>

<P><STRONG><a name="[e0]"></a>PORT_Init</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, swm341_port.o(.text.PORT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLLInit
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_read_data
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_uart3_init
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_uart0_init
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_sfc_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_rgb_init
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_Init
</UL>

<P><STRONG><a name="[f9]"></a>Refresh_New_Page</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, gt_init_screen_home.o(.text.Refresh_New_Page))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = Refresh_New_Page &rArr; gt_disp_load_scr &rArr; gt_disp_load_scr_anim &rArr; gt_disp_ref_area &rArr; _gt_disp_check_and_copy_foreach &rArr; _check_and_copy_foreach &rArr;  _check_and_copy_foreach (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_load_scr
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_player_set_index
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[185]"></a>SDRAM_Init</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, swm341_sdram.o(.text.SDRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SDRAM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_rgb_init
</UL>

<P><STRONG><a name="[188]"></a>SFC_Init</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, swm341_sfc.o(.text.SFC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SFC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_read_data
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_sfc_config
</UL>

<P><STRONG><a name="[21e]"></a>SFC_QuadSwitch</STRONG> (Thumb, 196 bytes, Stack size 0 bytes, swm341_sfc.o(.text.SFC_QuadSwitch))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[21f]"></a>SFC_ReadJEDEC</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, swm341_sfc.o(.text.SFC_ReadJEDEC))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fc]"></a>Send_Byte</STRONG> (Thumb, 344 bytes, Stack size 16 bytes, bsp_sfc.o(.text.Send_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBit
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClrBit
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_read_data
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dev_systick.o(.text.SysTick_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[fd]"></a>SysTick_Handler_cb</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dev_systick.o(.text.SysTick_Handler_cb))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[fe]"></a>SystemInit</STRONG> (Thumb, 408 bytes, Stack size 8 bytes, system_swm341.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SystemInit &rArr; switchToPLL &rArr; PLLInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchToPLL
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Param_at_xMHz
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[59]"></a>TIMR4_Handler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main.o(.text.TIMR4_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMR4_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_tick_inc
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMR_INTClr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[101]"></a>TIMR_INTClr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, swm341_timr.o(.text.TIMR_INTClr))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMR4_Handler
</UL>

<P><STRONG><a name="[103]"></a>TIMR_Init</STRONG> (Thumb, 904 bytes, Stack size 24 bytes, swm341_timr.o(.text.TIMR_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIMR_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMR_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[220]"></a>TIMR_Start</STRONG> (Thumb, 400 bytes, Stack size 0 bytes, swm341_timr.o(.text.TIMR_Start))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[104]"></a>TIMR_Stop</STRONG> (Thumb, 450 bytes, Stack size 0 bytes, swm341_timr.o(.text.TIMR_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMR_Init
</UL>

<P><STRONG><a name="[1f]"></a>UART3_Handler</STRONG> (Thumb, 394 bytes, Stack size 24 bytes, bsp_uart.o(.text.UART3_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART3_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Start
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReadByte
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IsRXFIFOEmpty
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_INTStat
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_INTClr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm341.o(RESET)
</UL>
<P><STRONG><a name="[106]"></a>UART_INTClr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, swm341_uart.o(.text.UART_INTClr))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_Handler
</UL>

<P><STRONG><a name="[105]"></a>UART_INTStat</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, swm341_uart.o(.text.UART_INTStat))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_Handler
</UL>

<P><STRONG><a name="[18b]"></a>UART_Init</STRONG> (Thumb, 368 bytes, Stack size 8 bytes, swm341_uart.o(.text.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_uart3_init
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_uart0_init
</UL>

<P><STRONG><a name="[108]"></a>UART_IsRXFIFOEmpty</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, swm341_uart.o(.text.UART_IsRXFIFOEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_Handler
</UL>

<P><STRONG><a name="[196]"></a>UART_IsTXBusy</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, swm341_uart.o(.text.UART_IsTXBusy))
<BR><BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_pack
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[18c]"></a>UART_Open</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, swm341_uart.o(.text.UART_Open))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_uart3_init
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_uart0_init
</UL>

<P><STRONG><a name="[107]"></a>UART_ReadByte</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, swm341_uart.o(.text.UART_ReadByte))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_Handler
</UL>

<P><STRONG><a name="[195]"></a>UART_WriteByte</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, swm341_uart.o(.text.UART_WriteByte))
<BR><BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_pack
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[109]"></a>WDT_Init</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, swm341_wdt.o(.text.WDT_Init))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_Handler
</UL>

<P><STRONG><a name="[10a]"></a>WDT_Start</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, swm341_wdt.o(.text.WDT_Start))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_Handler
</UL>

<P><STRONG><a name="[91]"></a>_flush_cb</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, main.o(.text._flush_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _flush_cb &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_port_disp.o(.text.gt_port_disp_init)
</UL>
<P><STRONG><a name="[12b]"></a>_gt_anim_core_init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, gt_anim.o(.text._gt_anim_core_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _gt_anim_core_init &rArr; _gt_timer_create &rArr; _mem_malloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_timer_set_paused
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_init
</UL>

<P><STRONG><a name="[131]"></a>_gt_disp_hided_layer_top_widgets</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, gt_hal_disp.o(.text._gt_disp_hided_layer_top_widgets))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _gt_disp_hided_layer_top_widgets &rArr; gt_event_send &rArr; gt_obj_is_bubble_notify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_event_send
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_visible
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_indev_handler
</UL>

<P><STRONG><a name="[132]"></a>_gt_disp_refr_append_area</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, gt_hal_disp.o(.text._gt_disp_refr_append_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _gt_disp_refr_append_area &rArr; gt_area_join
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_area_copy
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_area_join
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_area_is_on
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_gc_get_disp
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_size_change
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_size
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_area
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_update_layer_top_widget_area
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_scroll_area_act
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_invalid_area
</UL>

<P><STRONG><a name="[1f6]"></a>_gt_disp_refr_area_pop</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gt_hal_disp.o(.text._gt_disp_refr_area_pop))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_refr_timer
</UL>

<P><STRONG><a name="[1f4]"></a>_gt_disp_refr_check</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gt_hal_disp.o(.text._gt_disp_refr_check))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_refr_timer
</UL>

<P><STRONG><a name="[1f5]"></a>_gt_disp_refr_get_area</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, gt_hal_disp.o(.text._gt_disp_refr_get_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _gt_disp_refr_get_area
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_refr_timer
</UL>

<P><STRONG><a name="[136]"></a>_gt_disp_refr_reset_areas</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, gt_hal_disp.o(.text._gt_disp_refr_reset_areas))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _gt_disp_refr_reset_areas &rArr; gt_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memset
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_gc_get_disp
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_scroll_area_act
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_load_scr_anim
</UL>

<P><STRONG><a name="[137]"></a>_gt_disp_reload_max_area</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, gt_hal_disp.o(.text._gt_disp_reload_max_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _gt_disp_reload_max_area &rArr; _calc_max_area_recursive &rArr;  _calc_max_area_recursive (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_gc_get_disp
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_calc_max_area_recursive
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_load_scr_anim
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scr_anim_ready_cb
</UL>

<P><STRONG><a name="[139]"></a>_gt_disp_update_max_area</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, gt_hal_disp.o(.text._gt_disp_update_max_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _gt_disp_update_max_area &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_gc_get_disp
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_size
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_area
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_update_layer_top_widget_area
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg_img
</UL>

<P><STRONG><a name="[13a]"></a>_gt_extra_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gt_extra.o(.text._gt_extra_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _gt_extra_init &rArr; gt_sjpg_init &rArr; gt_img_decoder_create &rArr; _mem_malloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_sjpg_init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_png_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_init
</UL>

<P><STRONG><a name="[117]"></a>_gt_gc_get_disp</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gt_gc.o(.text._gt_gc_get_disp))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_update_max_area
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_res_ver
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_res_hor
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_default
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_reload_max_area
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_refr_reset_areas
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_refr_append_area
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_drv_register
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_calc_max_area_recursive
</UL>

<P><STRONG><a name="[1f7]"></a>_gt_gc_get_scr_info</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gt_gc.o(.text._gt_gc_get_scr_info))
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_scr_stack_set_home_scr_id
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_scr_stack_register_id_list
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_scr_stack_set_home_scr
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_scr_stack_push
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_scr_stack_pop
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_scr_stack_peek
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_scr_stack_is_home_scr_alive
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_scr_stack_is_empty
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_scr_stack_has_before
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_scr_stack_get_init_func
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_scr_stack_get_home_scr_id
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_scr_stack_clear
</UL>

<P><STRONG><a name="[19d]"></a>_gt_gc_set_disp</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gt_gc.o(.text._gt_gc_set_disp))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_drv_register
</UL>

<P><STRONG><a name="[13f]"></a>_gt_hal_fp_init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, gt_hal_fs.o(.text._gt_hal_fp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _gt_hal_fp_init &rArr; _mem_malloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memset_0
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_malloc
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_open_cb
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_open_cb
</UL>

<P><STRONG><a name="[144]"></a>_gt_img_decoder_init</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, gt_img_decoder.o(.text._gt_img_decoder_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _gt_img_decoder_init &rArr; _mem_malloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memset
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_init
</UL>

<P><STRONG><a name="[123]"></a>_gt_indev_remove_want_delate_target</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, gt_indev.o(.text._gt_indev_remove_want_delate_target))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _gt_indev_remove_want_delate_target
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_indev_get_dev_count
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_indev_get_dev_by_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_class_destroy
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_destroy_and_free_children
</UL>

<P><STRONG><a name="[12a]"></a>_gt_obj_class_destroy</STRONG> (Thumb, 452 bytes, Stack size 24 bytes, gt_obj_class.o(.text._gt_obj_class_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _gt_obj_class_destroy &rArr; _destroy_and_free_children &rArr;  _destroy_and_free_children (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_indev_remove_want_delate_target
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_event_send
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_free
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memmove
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_default
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_realloc
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_destroy_and_free_children
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_alive_scr_object_cb
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_scr_stack_pop
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_load_scr_anim
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_destroy_handler_cb
</UL>

<P><STRONG><a name="[88]"></a>_gt_obj_destroy_handler_cb</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, gt_obj.o(.text._gt_obj_destroy_handler_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _gt_obj_destroy_handler_cb &rArr; _gt_obj_class_destroy &rArr; _destroy_and_free_children &rArr;  _destroy_and_free_children (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_class_destroy
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_timer_set_user_data
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_timer_set_repeat_count
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_timer_get_user_data
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_obj.o(.text.gt_obj_destroy)
</UL>
<P><STRONG><a name="[14c]"></a>_gt_obj_focus_clicked</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, gt_obj_pos.o(.text._gt_obj_focus_clicked))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = _gt_obj_focus_clicked &rArr;  _gt_obj_focus_clicked (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_focus_clicked
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_focus_clicked
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_find_clicked_obj_by_focus
</UL>

<P><STRONG><a name="[116]"></a>_gt_obj_is_ignore_calc_max_area</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gt_style.o(.text._gt_obj_is_ignore_calc_max_area))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_calc_max_area_recursive
</UL>

<P><STRONG><a name="[14f]"></a>_gt_obj_move_child_by</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, gt_style.o(.text._gt_obj_move_child_by))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + In Cycle
<LI>Call Chain = _gt_obj_move_child_by &rArr;  _gt_obj_move_child_by (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_move_child_by
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_move_child_by
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_update_layer_top_widget_area
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_pos
</UL>

<P><STRONG><a name="[1cc]"></a>_gt_obj_set_process_point</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gt_obj_scroll.o(.text._gt_obj_set_process_point))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_indev_handler
</UL>

<P><STRONG><a name="[1d4]"></a>_gt_timer_core_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gt_timer.o(.text._gt_timer_core_init))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_init
</UL>

<P><STRONG><a name="[12c]"></a>_gt_timer_create</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, gt_timer.o(.text._gt_timer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _gt_timer_create &rArr; _mem_malloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_tick_get
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_malloc
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_anim_core_init
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_destroy
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_indev_drv_register
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_drv_register
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_player_create
</UL>

<P><STRONG><a name="[11f]"></a>_gt_timer_del</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, gt_timer.o(.text._gt_timer_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _gt_timer_del &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_tick_get
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_turn_prev_item
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_turn_next_item
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deinit_cb
</UL>

<P><STRONG><a name="[10f]"></a>_gt_timer_get_period</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, gt_timer.o(.text._gt_timer_get_period))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _gt_timer_get_period &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_auto_play_callback
</UL>

<P><STRONG><a name="[10b]"></a>_gt_timer_get_user_data</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, gt_timer.o(.text._gt_timer_get_user_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _gt_timer_get_user_data &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_auto_play_callback
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_destroy_handler_cb
</UL>

<P><STRONG><a name="[15d]"></a>_gt_timer_handler</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, gt_timer.o(.text._gt_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _gt_timer_handler &rArr; _mem_free &rArr; gt_tlsf_free
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_tick_get
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_task_handler
</UL>

<P><STRONG><a name="[12d]"></a>_gt_timer_set_paused</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, gt_timer.o(.text._gt_timer_set_paused))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _gt_timer_set_paused &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_tick_get
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_anim_del
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_anim_core_init
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_anim_start
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_anim_task_handler
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_player_create
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_turn_prev_item
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_turn_next_item
</UL>

<P><STRONG><a name="[14b]"></a>_gt_timer_set_repeat_count</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, gt_timer.o(.text._gt_timer_set_repeat_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _gt_timer_set_repeat_count &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_destroy
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_destroy_handler_cb
</UL>

<P><STRONG><a name="[14a]"></a>_gt_timer_set_user_data</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, gt_timer.o(.text._gt_timer_set_user_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _gt_timer_set_user_data &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_destroy_handler_cb
</UL>

<P><STRONG><a name="[15e]"></a>_gt_vector_add_item</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, gt_vector.o(.text._gt_vector_add_item))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _gt_vector_add_item &rArr; _mem_realloc &rArr; gt_tlsf_realloc &rArr; gt_tlsf_free
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memcpy
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_realloc
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_vector_replace_item
</UL>

<P><STRONG><a name="[15f]"></a>_gt_vector_create</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, gt_vector.o(.text._gt_vector_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _gt_vector_create &rArr; _mem_malloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memset
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_imgbtn_create
</UL>

<P><STRONG><a name="[11e]"></a>_gt_vector_free</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, gt_vector.o(.text._gt_vector_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _gt_vector_free &rArr; _mem_free &rArr; gt_tlsf_free
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deinit_cb
</UL>

<P><STRONG><a name="[128]"></a>_gt_vector_get_item</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gt_vector.o(.text._gt_vector_get_item))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_imgbtn_set_src
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_event_cb
</UL>

<P><STRONG><a name="[160]"></a>_gt_vector_replace_item</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, gt_vector.o(.text._gt_vector_replace_item))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _gt_vector_replace_item &rArr; _gt_vector_add_item &rArr; _mem_realloc &rArr; gt_tlsf_realloc &rArr; gt_tlsf_free
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memcpy
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_vector_add_item
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_imgbtn_set_src
</UL>

<P><STRONG><a name="[127]"></a>_gt_vector_turn_next</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, gt_vector.o(.text._gt_vector_turn_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _gt_vector_turn_next
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_event_cb
</UL>

<P><STRONG><a name="[f3]"></a>_mem_free</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gt_mem.o(.text._mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _mem_free &rArr; gt_tlsf_free
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_tlsf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_stack_destroy
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_stack_create
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_anim_del
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_timer_handler
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg_img
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_radius_mask_init
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_anim_start
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_class_destroy
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_vector_free
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_anim_task_handler
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_close_cb
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_close_cb
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_class_create
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_info_cleanup
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode_memory
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_zTXt
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_tEXt
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_iTXt
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_iCCP
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_inflatev
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tree_cleanup
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LodePNGText_cleanup
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LodePNGIText_cleanup
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuffmanTree_makeFromLengths
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_png_open
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_png_close
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sjpg_free
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_sjpg_open
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_sjpg_info
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_imgbtn_set_src_press
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_imgbtn_set_src
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_imgs_free_cb
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deinit_cb
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_img_set_src
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deinit_cb
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deinit_cb
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_destroy_and_free_children
</UL>

<P><STRONG><a name="[f2]"></a>_mem_malloc</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gt_mem.o(.text._mem_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _mem_malloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_tlsf_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_stack_create
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_img_decoder_create
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_img_decoder_init
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_add_event_cb
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg_img
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_radius_mask_init
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_load_scr_anim
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_anim_start
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_vf_init
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_src_init
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_indev_drv_register
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_drv_register
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_vector_create
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_vector_add_item
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_hal_fp_init
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_class_create
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_convert
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_zTXt
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_tEXt
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_iTXt
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_iCCP
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_PLTE
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_inflatev
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_add_text_sized
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_add_itext_sized
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuffmanTree_makeFromLengths
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_load_file
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_png_open
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_sjpg_open
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_sjpg_info
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_timer_create
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_imgbtn_set_src_press
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_imgbtn_set_src
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_img_set_src
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_player_add_item
</UL>

<P><STRONG><a name="[149]"></a>_mem_realloc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gt_mem.o(.text._mem_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _mem_realloc &rArr; gt_tlsf_realloc &rArr; gt_tlsf_free
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_tlsf_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_add_event_cb
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_load_scr_anim
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_class_destroy
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_vector_add_item
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_class_create
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_inflatev
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_add_text_sized
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_add_itext_sized
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_player_add_item
</UL>

<P><STRONG><a name="[89]"></a>_scroll_ready_cb</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gt_obj_scroll.o(.text._scroll_ready_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _scroll_ready_cb &rArr; gt_event_send &rArr; gt_obj_is_bubble_notify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_event_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_obj_scroll.o(.text.gt_obj_scroll_to)
</UL>
<P><STRONG><a name="[184]"></a>bsp_lcd_rgb_init</STRONG> (Thumb, 1302 bytes, Stack size 72 bytes, bsp_lcd_rgb.o(.text.bsp_lcd_rgb_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = bsp_lcd_rgb_init &rArr; GPIO_Init &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Start
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBit
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClrBit
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[187]"></a>bsp_sfc_config</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, bsp_sfc.o(.text.bsp_sfc_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bsp_sfc_config &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFC_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[189]"></a>bsp_spi_io_config</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, bsp_sfc.o(.text.bsp_spi_io_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bsp_spi_io_config &rArr; GPIO_Init &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBit
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_read_data
</UL>

<P><STRONG><a name="[18a]"></a>bsp_uart0_init</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, bsp_uart.o(.text.bsp_uart0_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bsp_uart0_init &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18d]"></a>bsp_uart3_init</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, bsp_uart.o(.text.bsp_uart3_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bsp_uart3_init &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[169]"></a>draw_bg</STRONG> (Thumb, 2168 bytes, Stack size 168 bytes, gt_draw.o(.text.draw_bg))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = draw_bg &rArr; gt_draw_blend &rArr; gt_draw_blend_with_rgb565_opacity
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memset
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_draw_blend
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_free
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_radius_mask_init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_get_radius_mask_buf
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_area_is_intersect_screen
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_area_copy
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_malloc
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_focus
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_cb
</UL>

<P><STRONG><a name="[166]"></a>draw_bg_img</STRONG> (Thumb, 716 bytes, Stack size 136 bytes, gt_draw.o(.text.draw_bg_img))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = draw_bg_img &rArr; gt_draw_blend &rArr; gt_draw_blend_with_rgb565_opacity
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_img_decoder_read_line
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_img_decoder_open
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_img_decoder_close
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_read_img_offset
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_draw_blend
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_free
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_update_max_area
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_area_is_intersect_screen
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_malloc
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_cb
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_cb
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_cb
</UL>

<P><STRONG><a name="[167]"></a>draw_focus</STRONG> (Thumb, 102 bytes, Stack size 56 bytes, gt_draw.o(.text.draw_focus))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = draw_focus &rArr; draw_bg &rArr; gt_draw_blend &rArr; gt_draw_blend_with_rgb565_opacity
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_graph_init_rect_attr
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_color_focus
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_cb
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_cb
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_cb
</UL>

<P><STRONG><a name="[a6]"></a>fputc</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, bsp_uart.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WriteByte
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IsTXBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[163]"></a>gt_abs</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gt_math.o(.text.gt_abs))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_anim_speed_to_time
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_indev_handler
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_indev_scroll_throw_exec_cb
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_ref_area
</UL>

<P><STRONG><a name="[197]"></a>gt_anim_del</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, gt_anim.o(.text.gt_anim_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gt_anim_del &rArr; _gt_timer_set_paused &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_free
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_timer_set_paused
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_scroll_to
</UL>

<P><STRONG><a name="[198]"></a>gt_anim_init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, gt_anim.o(.text.gt_anim_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gt_anim_init &rArr; gt_memset_0
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memset_0
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_scroll_to
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_indev_handler
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_load_scr_anim
</UL>

<P><STRONG><a name="[1a7]"></a>gt_anim_set_path_type</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gt_anim.o(.text.gt_anim_set_path_type))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_scroll_to
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_load_scr_anim
</UL>

<P><STRONG><a name="[199]"></a>gt_anim_speed_to_time</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gt_anim.o(.text.gt_anim_speed_to_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gt_anim_speed_to_time
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_scroll_to
</UL>

<P><STRONG><a name="[19a]"></a>gt_anim_start</STRONG> (Thumb, 340 bytes, Stack size 48 bytes, gt_anim.o(.text.gt_anim_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = gt_anim_start &rArr; _gt_timer_set_paused &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_tick_get
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_free
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memcpy
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_malloc
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_timer_set_paused
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_scroll_to
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_indev_handler
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_load_scr_anim
</UL>

<P><STRONG><a name="[135]"></a>gt_area_copy</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gt_obj_pos.o(.text.gt_area_copy))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_radius_mask_init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_refr_append_area
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_old_scr_anim_ready_cb
</UL>

<P><STRONG><a name="[11a]"></a>gt_area_cover_screen</STRONG> (Thumb, 192 bytes, Stack size 36 bytes, gt_area.o(.text.gt_area_cover_screen))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = gt_area_cover_screen
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_draw_blend
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_ref_area
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_and_copy_foreach
</UL>

<P><STRONG><a name="[1b7]"></a>gt_area_intersect_screen</STRONG> (Thumb, 204 bytes, Stack size 36 bytes, gt_area.o(.text.gt_area_intersect_screen))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = gt_area_intersect_screen
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_draw_blend
</UL>

<P><STRONG><a name="[11c]"></a>gt_area_is_intersect_screen</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, gt_area.o(.text.gt_area_is_intersect_screen))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gt_area_is_intersect_screen
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg_img
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_ref_area
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_check_and_copy_foreach
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_and_copy_foreach
</UL>

<P><STRONG><a name="[133]"></a>gt_area_is_on</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, gt_area.o(.text.gt_area_is_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gt_area_is_on
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_refr_append_area
</UL>

<P><STRONG><a name="[134]"></a>gt_area_join</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, gt_area.o(.text.gt_area_join))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gt_area_join
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_refr_append_area
</UL>

<P><STRONG><a name="[12f]"></a>gt_bezier3</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, gt_math.o(.text.gt_bezier3))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gt_bezier3
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_anim_path_overshoot
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_anim_path_ease_out
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_anim_path_ease_in_out
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_anim_path_ease_in
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_anim_path_bounce
</UL>

<P><STRONG><a name="[1aa]"></a>gt_color_fill</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, gt_color.o(.text.gt_color_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gt_color_fill
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_ref_area
</UL>

<P><STRONG><a name="[194]"></a>gt_color_focus</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gt_color.o(.text.gt_color_focus))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_focus
</UL>

<P><STRONG><a name="[19b]"></a>gt_dialog_has_showing</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gt_dialog.o(.text.gt_dialog_has_showing))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gt_dialog_has_showing &rArr; _find_showing_recursive_by_type &rArr;  _find_showing_recursive_by_type (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_default
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_find_showing_recursive_by_type
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_indev_handler
</UL>

<P><STRONG><a name="[1ef]"></a>gt_disp_drv_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gt_hal_disp.o(.text.gt_disp_drv_init))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_port_disp_init
</UL>

<P><STRONG><a name="[19c]"></a>gt_disp_drv_register</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, gt_hal_disp.o(.text.gt_disp_drv_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = gt_disp_drv_register &rArr; gt_obj_class_create &rArr; gt_layout_row_grow &rArr; _row_grow_inside_invert &rArr;  _row_grow_inside_invert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_virtual
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memset
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_malloc
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_screen_set_bgcolor
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_class_create
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_gc_set_disp
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_gc_get_disp
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_timer_create
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_port_disp_init
</UL>

<P><STRONG><a name="[182]"></a>gt_disp_get_area_act</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, gt_disp.o(.text.gt_disp_get_area_act))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gt_disp_get_area_act &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_default
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_click_point_by_phy_point
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_screen_event_cb
</UL>

<P><STRONG><a name="[17e]"></a>gt_disp_get_area_max</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, gt_disp.o(.text.gt_disp_get_area_max))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gt_disp_get_area_max &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_default
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_screen_event_cb
</UL>

<P><STRONG><a name="[147]"></a>gt_disp_get_default</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gt_hal_disp.o(.text.gt_disp_get_default))
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_gc_get_disp
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_update_layer_top_widget_area
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_refr_timer
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_dialog_has_showing
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_stack_push_scr_only_st
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_scroll_area_act
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_ref_area
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_load_scr_anim
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_invalid_area
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_scr
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_layer_top
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_area_max
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_area_act
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_class_destroy
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scr_anim_start_cb
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scr_anim_ready_cb
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_class_create
</UL>

<P><STRONG><a name="[1a1]"></a>gt_disp_get_layer_top</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gt_disp.o(.text.gt_disp_get_layer_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gt_disp_get_layer_top
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_indev_handler
</UL>

<P><STRONG><a name="[17b]"></a>gt_disp_get_res_hor</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gt_hal_disp.o(.text.gt_disp_get_res_hor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gt_disp_get_res_hor
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_gc_get_disp
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_scroll_to
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_ref_area
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_invalid_area
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scr_anim_ready_cb
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_class_create
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_screen_event_cb
</UL>

<P><STRONG><a name="[17c]"></a>gt_disp_get_res_ver</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gt_hal_disp.o(.text.gt_disp_get_res_ver))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gt_disp_get_res_ver
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_gc_get_disp
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_scroll_to
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_ref_area
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_invalid_area
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scr_anim_ready_cb
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_class_create
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_screen_event_cb
</UL>

<P><STRONG><a name="[1a2]"></a>gt_disp_get_scr</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gt_disp.o(.text.gt_disp_get_scr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gt_disp_get_scr
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_prev_focus_change
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_next_focus_change
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_indev_handler
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_check_scr
</UL>

<P><STRONG><a name="[1f0]"></a>gt_disp_graph_buf_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gt_hal_disp.o(.text.gt_disp_graph_buf_init))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_port_disp_init
</UL>

<P><STRONG><a name="[10d]"></a>gt_disp_invalid_area</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, gt_disp.o(.text.gt_disp_invalid_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = gt_disp_invalid_area &rArr; _gt_disp_refr_append_area &rArr; gt_area_join
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_is_child
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_y
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_x
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_check_scr
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_res_ver
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_res_hor
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_default
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_refr_append_area
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_child_set_prop
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_focus
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_stack_load_scr
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scr_anim_ready_cb
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_obj_event_cb
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_event_cb
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_event_cb
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_turn_prev_item
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_turn_next_item
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_event_cb
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_auto_play_callback
</UL>

<P><STRONG><a name="[fb]"></a>gt_disp_load_scr</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, gt_disp.o(.text.gt_disp_load_scr))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = gt_disp_load_scr &rArr; gt_disp_load_scr_anim &rArr; gt_disp_ref_area &rArr; _gt_disp_check_and_copy_foreach &rArr; _check_and_copy_foreach &rArr;  _check_and_copy_foreach (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_load_scr_anim
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Refresh_New_Page
</UL>

<P><STRONG><a name="[1a6]"></a>gt_disp_load_scr_anim</STRONG> (Thumb, 682 bytes, Stack size 200 bytes, gt_disp.o(.text.gt_disp_load_scr_anim))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = gt_disp_load_scr_anim &rArr; gt_disp_ref_area &rArr; _gt_disp_check_and_copy_foreach &rArr; _check_and_copy_foreach &rArr;  _check_and_copy_foreach (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_y
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_x
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memcpy
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_ref_area
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_default
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_anim_start
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_anim_set_path_type
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_anim_init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_realloc
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_malloc
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_class_destroy
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_reload_max_area
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_refr_reset_areas
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_stack_load_scr
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_load_scr
</UL>

<P><STRONG><a name="[1a8]"></a>gt_disp_ref_area</STRONG> (Thumb, 2152 bytes, Stack size 104 bytes, gt_disp.o(.text.gt_disp_ref_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = gt_disp_ref_area &rArr; _gt_disp_check_and_copy_foreach &rArr; _check_and_copy_foreach &rArr;  _check_and_copy_foreach (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_screen_get_bgcolor
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memmove
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_res_ver
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_res_hor
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_default
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_color_fill
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_area_is_intersect_screen
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_area_cover_screen
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_abs
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_check_and_copy_foreach
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_refr_timer
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_load_scr_anim
</UL>

<P><STRONG><a name="[181]"></a>gt_disp_scroll_area_act</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, gt_disp.o(.text.gt_disp_scroll_area_act))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = gt_disp_scroll_area_act &rArr; _gt_disp_refr_append_area &rArr; gt_area_join
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_default
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_refr_reset_areas
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_refr_append_area
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_screen_event_cb
</UL>

<P><STRONG><a name="[1ab]"></a>gt_disp_stack_load_scr</STRONG> (Thumb, 90 bytes, Stack size 64 bytes, gt_disp.o(.text.gt_disp_stack_load_scr))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = gt_disp_stack_load_scr &rArr; gt_disp_load_scr_anim &rArr; gt_disp_ref_area &rArr; _gt_disp_check_and_copy_foreach &rArr; _check_and_copy_foreach &rArr;  _check_and_copy_foreach (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_stack_push_scr_only_st
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_load_scr_anim
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_invalid_area
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_ui_init
</UL>

<P><STRONG><a name="[1ac]"></a>gt_disp_stack_push_scr_only_st</STRONG> (Thumb, 448 bytes, Stack size 40 bytes, gt_disp.o(.text.gt_disp_stack_push_scr_only_st))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = gt_disp_stack_push_scr_only_st &rArr; gt_scr_stack_pop &rArr; _gt_obj_class_destroy &rArr; _destroy_and_free_children &rArr;  _destroy_and_free_children (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_scr_stack_set_home_scr
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_scr_stack_push
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_scr_stack_pop
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_scr_stack_peek
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_scr_stack_is_home_scr_alive
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_scr_stack_is_empty
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_scr_stack_has_before
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_scr_stack_get_init_func
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_scr_stack_get_home_scr_id
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_scr_stack_clear
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_default
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_stack_load_scr
</UL>

<P><STRONG><a name="[18f]"></a>gt_draw_blend</STRONG> (Thumb, 504 bytes, Stack size 80 bytes, gt_draw_blend.o(.text.gt_draw_blend))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = gt_draw_blend &rArr; gt_draw_blend_with_rgb565_opacity
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_area_cover_screen
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_draw_blend_with_rgb565_opacity
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_draw_blend_with_rgb565_no_opacity
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_area_intersect_screen
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg_img
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
</UL>

<P><STRONG><a name="[1b9]"></a>gt_draw_blend_with_rgb565_no_opacity</STRONG> (Thumb, 1770 bytes, Stack size 48 bytes, gt_draw_blend_with_rgb565.o(.text.gt_draw_blend_with_rgb565_no_opacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gt_draw_blend_with_rgb565_no_opacity
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_draw_blend
</UL>

<P><STRONG><a name="[1b8]"></a>gt_draw_blend_with_rgb565_opacity</STRONG> (Thumb, 2386 bytes, Stack size 56 bytes, gt_draw_blend_with_rgb565.o(.text.gt_draw_blend_with_rgb565_opacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gt_draw_blend_with_rgb565_opacity
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_per_255
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_draw_blend
</UL>

<P><STRONG><a name="[124]"></a>gt_event_get_code</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gt_event.o(.text.gt_event_get_code))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_screen_event_cb
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_obj_event_cb
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_event_cb
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_event_cb
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_event_cb
</UL>

<P><STRONG><a name="[122]"></a>gt_event_send</STRONG> (Thumb, 272 bytes, Stack size 56 bytes, gt_event.o(.text.gt_event_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = gt_event_send &rArr; gt_obj_is_bubble_notify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_is_bubble_notify
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_parent
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_size
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_area
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_child_set_prop
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_update_layer_top_widget_area
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scroll_ready_cb
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scroll_by_y
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scroll_by_x
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_focus
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_scroll_to
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_indev_handler
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_hided_layer_top_widgets
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_class_destroy
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_class_create
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_screen_event_cb
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_obj_event_cb
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_imgbtn_set_src_press
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_imgbtn_set_src
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_event_cb
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_img_set_src
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_event_cb
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_player_set_index
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_destroy_and_free_children
</UL>

<P><STRONG><a name="[1bd]"></a>gt_find_clicked_obj_by_focus</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gt_obj_pos.o(.text.gt_find_clicked_obj_by_focus))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gt_find_clicked_obj_by_focus &rArr; _gt_obj_focus_clicked &rArr;  _gt_obj_focus_clicked (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_focus_clicked
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_indev_handler
</UL>

<P><STRONG><a name="[1be]"></a>gt_find_clicked_obj_by_point</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, gt_obj_pos.o(.text.gt_find_clicked_obj_by_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = gt_find_clicked_obj_by_point &rArr; _gt_obj_foreach_clicked &rArr;  _gt_obj_foreach_clicked (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_foreach_clicked
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_indev_handler
</UL>

<P><STRONG><a name="[140]"></a>gt_fs_close</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, gt_fs.o(.text.gt_fs_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gt_fs_close &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_img_decoder_built_in_info
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_img_decoder_built_in_close
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_load_file
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_png_open
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_png_info
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_png_close
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_sjpg_open
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_sjpg_info
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_sjpg_close
</UL>

<P><STRONG><a name="[159]"></a>gt_fs_get_ext</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, gt_fs.o(.text.gt_fs_get_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gt_fs_get_ext
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_sjpg_info
</UL>

<P><STRONG><a name="[141]"></a>gt_fs_open</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, gt_fs.o(.text.gt_fs_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gt_fs_open
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_vf_get_drv
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_src_get_drv
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_img_decoder_built_in_open
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_img_decoder_built_in_info
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_load_file
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_png_open
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_png_info
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_sjpg_open
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_sjpg_info
</UL>

<P><STRONG><a name="[143]"></a>gt_fs_read</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, gt_fs.o(.text.gt_fs_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gt_fs_read
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_img_decoder_built_in_read_line
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_load_file
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_png_open
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_png_info
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_func
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_sjpg_open
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_sjpg_info
</UL>

<P><STRONG><a name="[192]"></a>gt_fs_read_img_offset</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, gt_fs.o(.text.gt_fs_read_img_offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gt_fs_read_img_offset
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg_img
</UL>

<P><STRONG><a name="[125]"></a>gt_fs_read_img_wh</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, gt_fs.o(.text.gt_fs_read_img_wh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gt_fs_read_img_wh
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_vf_get_drv
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_src_get_drv
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_event_cb
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_event_cb
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_turn_prev_item
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_turn_next_item
</UL>

<P><STRONG><a name="[142]"></a>gt_fs_seek</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gt_fs.o(.text.gt_fs_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gt_fs_seek
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_img_decoder_built_in_read_line
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_load_file
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_png_open
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_png_info
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_func
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_sjpg_read_line
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_sjpg_open
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_sjpg_info
</UL>

<P><STRONG><a name="[21c]"></a>gt_fs_tell</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gt_fs.o(.text.gt_fs_tell))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_load_file
</UL>

<P><STRONG><a name="[168]"></a>gt_graph_init_rect_attr</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, gt_graph_base.o(.text.gt_graph_init_rect_attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gt_graph_init_rect_attr &rArr; gt_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_focus
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_cb
</UL>

<P><STRONG><a name="[1c2]"></a>gt_img_create</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gt_img.o(.text.gt_img_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = gt_img_create &rArr; gt_obj_class_create &rArr; gt_layout_row_grow &rArr; _row_grow_inside_invert &rArr;  _row_grow_inside_invert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_class_create
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_init_screen_home
</UL>

<P><STRONG><a name="[193]"></a>gt_img_decoder_close</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, gt_img_decoder.o(.text.gt_img_decoder_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gt_img_decoder_close &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg_img
</UL>

<P><STRONG><a name="[1c3]"></a>gt_img_decoder_create</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gt_img_decoder.o(.text.gt_img_decoder_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gt_img_decoder_create &rArr; _mem_malloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memset
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_sjpg_init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_png_init
</UL>

<P><STRONG><a name="[190]"></a>gt_img_decoder_open</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, gt_img_decoder.o(.text.gt_img_decoder_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gt_img_decoder_open &rArr; gt_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg_img
</UL>

<P><STRONG><a name="[191]"></a>gt_img_decoder_read_line</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, gt_img_decoder.o(.text.gt_img_decoder_read_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gt_img_decoder_read_line &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg_img
</UL>

<P><STRONG><a name="[1ee]"></a>gt_img_decoder_register</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gt_img_decoder.o(.text.gt_img_decoder_register))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_sjpg_init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_png_init
</UL>

<P><STRONG><a name="[1ed]"></a>gt_img_decoder_set_close_cb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gt_img_decoder.o(.text.gt_img_decoder_set_close_cb))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_sjpg_init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_png_init
</UL>

<P><STRONG><a name="[1ea]"></a>gt_img_decoder_set_info_cb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gt_img_decoder.o(.text.gt_img_decoder_set_info_cb))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_sjpg_init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_png_init
</UL>

<P><STRONG><a name="[1eb]"></a>gt_img_decoder_set_open_cb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gt_img_decoder.o(.text.gt_img_decoder_set_open_cb))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_sjpg_init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_png_init
</UL>

<P><STRONG><a name="[1ec]"></a>gt_img_decoder_set_read_line_cb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gt_img_decoder.o(.text.gt_img_decoder_set_read_line_cb))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_sjpg_init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_png_init
</UL>

<P><STRONG><a name="[1c4]"></a>gt_img_set_src</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, gt_img.o(.text.gt_img_set_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = gt_img_set_src &rArr; gt_event_send &rArr; gt_obj_is_bubble_notify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_event_send
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memset
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_free
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_malloc
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_is_type
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_init_screen_home
</UL>

<P><STRONG><a name="[1c6]"></a>gt_imgbtn_create</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, gt_imgbtn.o(.text.gt_imgbtn_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = gt_imgbtn_create &rArr; gt_obj_class_create &rArr; gt_layout_row_grow &rArr; _row_grow_inside_invert &rArr;  _row_grow_inside_invert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_vector_create
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_class_create
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_init_screen_home
</UL>

<P><STRONG><a name="[1c7]"></a>gt_imgbtn_set_src</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, gt_imgbtn.o(.text.gt_imgbtn_set_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = gt_imgbtn_set_src &rArr; gt_event_send &rArr; gt_obj_is_bubble_notify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_event_send
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_free
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memcpy
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_malloc
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_vector_replace_item
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_vector_get_item
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_is_type
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_init_screen_home
</UL>

<P><STRONG><a name="[1c8]"></a>gt_imgbtn_set_src_press</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, gt_imgbtn.o(.text.gt_imgbtn_set_src_press))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = gt_imgbtn_set_src_press &rArr; gt_event_send &rArr; gt_obj_is_bubble_notify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_event_send
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_free
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_malloc
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_is_type
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_init_screen_home
</UL>

<P><STRONG><a name="[1c9]"></a>gt_indev_drv_init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gt_hal_indev.o(.text.gt_indev_drv_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gt_indev_drv_init &rArr; gt_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_port_indev_init
</UL>

<P><STRONG><a name="[1ca]"></a>gt_indev_drv_register</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, gt_hal_indev.o(.text.gt_indev_drv_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = gt_indev_drv_register &rArr; _gt_timer_create &rArr; _mem_malloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memset_0
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_malloc
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_port_indev_init
</UL>

<P><STRONG><a name="[146]"></a>gt_indev_get_dev_by_idx</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gt_hal_indev.o(.text.gt_indev_get_dev_by_idx))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_indev_handler
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_indev_remove_want_delate_target
</UL>

<P><STRONG><a name="[145]"></a>gt_indev_get_dev_count</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gt_hal_indev.o(.text.gt_indev_get_dev_count))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_indev_handler
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_indev_remove_want_delate_target
</UL>

<P><STRONG><a name="[79]"></a>gt_indev_handler</STRONG> (Thumb, 1864 bytes, Stack size 144 bytes, gt_indev.o(.text.gt_indev_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = gt_indev_handler &rArr; gt_obj_scroll_to &rArr; gt_event_send &rArr; gt_obj_is_bubble_notify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_tick_get
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_scroll_ud
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_scroll_lr
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_scroll_to
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_prev_focus_change
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_next_focus_change
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_is_untouchability
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_click_point_by_phy_point
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_indev_get_dev_count
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_indev_get_dev_by_idx
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_find_clicked_obj_by_point
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_find_clicked_obj_by_focus
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_dialog_has_showing
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_set_process_point
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_hided_layer_top_widgets
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_event_send
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_scr
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_layer_top
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_anim_start
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_anim_init
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_abs
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_hal_indev.o(.text.gt_indev_drv_register)
</UL>
<P><STRONG><a name="[17d]"></a>gt_indev_set_disabled</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gt_indev.o(.text.gt_indev_set_disabled))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scr_anim_start_cb
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scr_anim_ready_cb
</UL>

<P><STRONG><a name="[1d2]"></a>gt_init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, gt_handler.o(.text.gt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = gt_init &rArr; gt_port_disp_init &rArr; gt_disp_drv_register &rArr; gt_obj_class_create &rArr; gt_layout_row_grow &rArr; _row_grow_inside_invert &rArr;  _row_grow_inside_invert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_mem_init
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_timer_core_init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_img_decoder_init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_extra_init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_anim_core_init
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_port_vf_init
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_port_src_init
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_port_indev_init
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_port_disp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b8]"></a>gt_init_screen_home</STRONG> (Thumb, 1916 bytes, Stack size 32 bytes, gt_init_screen_home.o(.text.gt_init_screen_home))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = gt_init_screen_home &rArr; gt_imgbtn_create &rArr; gt_obj_class_create &rArr; gt_layout_row_grow &rArr; _row_grow_inside_invert &rArr;  _row_grow_inside_invert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_size
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_pos
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_add_event_cb
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_screen_set_bgcolor
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_create
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_imgbtn_set_src_press
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_imgbtn_set_src
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_imgbtn_create
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_img_set_src
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_img_create
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_player_set_type
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_player_set_mode
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_player_create
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_player_add_item
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_ui.o(.rodata.gt_scr_list)
</UL>
<P><STRONG><a name="[1e0]"></a>gt_layout_row_grow</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, gt_layout.o(.text.gt_layout_row_grow))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = gt_layout_row_grow &rArr; _row_grow_inside_invert &rArr;  _row_grow_inside_invert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_w
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_row_grow_inside_invert
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_row_grow_inside
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_class_create
</UL>

<P><STRONG><a name="[12e]"></a>gt_map</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, gt_math.o(.text.gt_map))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_anim_path_overshoot
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_anim_path_linear
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_anim_path_ease_out
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_anim_path_ease_in_out
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_anim_path_ease_in
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_anim_path_bounce
</UL>

<P><STRONG><a name="[1d3]"></a>gt_mem_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gt_mem.o(.text.gt_mem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gt_mem_init &rArr; gt_tlsf_create_with_pool &rArr; gt_tlsf_create &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_tlsf_create_with_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_init
</UL>

<P><STRONG><a name="[152]"></a>gt_memcmp</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gt_mem.o(.text.gt_memcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = gt_memcmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_png_open
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_png_info
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_sjpg_open
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_sjpg_info
</UL>

<P><STRONG><a name="[156]"></a>gt_memcpy</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, gt_mem.o(.text.gt_memcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gt_memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_stack_push
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_tlsf_realloc
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_load_scr_anim
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_anim_start
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_vector_replace_item
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_vector_add_item
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_cb
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_png_read_line
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_func
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_sjpg_read_line
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_imgbtn_set_src
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_player_add_item
</UL>

<P><STRONG><a name="[148]"></a>gt_memmove</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gt_mem.o(.text.gt_memmove))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gt_memmove &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_ref_area
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_class_destroy
</UL>

<P><STRONG><a name="[120]"></a>gt_memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gt_mem.o(.text.gt_memset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gt_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_stack_create
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_stack_clear
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_img_decoder_create
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_img_decoder_init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_img_decoder_open
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_graph_init_rect_attr
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_refr_reset_areas
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_indev_drv_init
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_drv_register
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_vector_create
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_sjpg_open
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_img_set_src
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_player_add_item
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deinit_cb
</UL>

<P><STRONG><a name="[13e]"></a>gt_memset_0</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gt_mem.o(.text.gt_memset_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gt_memset_0
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_radius_mask_init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_get_radius_mask_buf
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_anim_init
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_src_init
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_indev_drv_register
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_hal_fp_init
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_class_create
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_png_info
</UL>

<P><STRONG><a name="[1db]"></a>gt_obj_add_event_cb</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, gt_event.o(.text.gt_obj_add_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gt_obj_add_event_cb &rArr; _mem_realloc &rArr; gt_tlsf_realloc &rArr; gt_tlsf_free
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_realloc
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_malloc
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_init_screen_home
</UL>

<P><STRONG><a name="[1a5]"></a>gt_obj_check_scr</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, gt_obj_pos.o(.text.gt_obj_check_scr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gt_obj_check_scr &rArr; gt_disp_get_scr
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_class_get_type
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_scr
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_invalid_area
</UL>

<P><STRONG><a name="[1e3]"></a>gt_obj_child_set_prop</STRONG> (Thumb, 868 bytes, Stack size 80 bytes, gt_style.o(.text.gt_obj_child_set_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + In Cycle
<LI>Call Chain = gt_obj_child_set_prop &rArr;  gt_obj_child_set_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_child_set_prop
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_event_send
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_invalid_area
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_child_set_prop
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_destroy
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_class_create
</UL>

<P><STRONG><a name="[19e]"></a>gt_obj_class_create</STRONG> (Thumb, 394 bytes, Stack size 24 bytes, gt_obj_class.o(.text.gt_obj_class_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = gt_obj_class_create &rArr; gt_layout_row_grow &rArr; _row_grow_inside_invert &rArr;  _row_grow_inside_invert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_overflow
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_child_set_prop
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_layout_row_grow
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_event_send
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memset_0
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_free
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_res_ver
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_res_hor
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_default
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_realloc
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_drv_register
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_create
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_imgbtn_create
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_img_create
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_player_create
</UL>

<P><STRONG><a name="[11b]"></a>gt_obj_class_get_type</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gt_obj_class.o(.text.gt_obj_class_get_type))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_check_scr
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_and_copy_foreach
</UL>

<P><STRONG><a name="[1d9]"></a>gt_obj_create</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gt_obj.o(.text.gt_obj_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = gt_obj_create &rArr; gt_obj_class_create &rArr; gt_layout_row_grow &rArr; _row_grow_inside_invert &rArr;  _row_grow_inside_invert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_class_create
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_init_screen_home
</UL>

<P><STRONG><a name="[178]"></a>gt_obj_destroy</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, gt_obj.o(.text.gt_obj_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = gt_obj_destroy &rArr; gt_obj_child_set_prop &rArr;  gt_obj_child_set_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_child_set_prop
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_timer_set_repeat_count
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scr_anim_ready_cb
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scr_anim_del_ready_cb
</UL>

<P><STRONG><a name="[1cb]"></a>gt_obj_get_click_point_by_phy_point</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, gt_obj_pos.o(.text.gt_obj_get_click_point_by_phy_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gt_obj_get_click_point_by_phy_point &rArr; gt_disp_get_area_act &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_area_act
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_indev_handler
</UL>

<P><STRONG><a name="[176]"></a>gt_obj_get_h</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, gt_style.o(.text.gt_obj_get_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gt_obj_get_h &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_row_grow_inside_invert
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_row_grow_inside
</UL>

<P><STRONG><a name="[16a]"></a>gt_obj_get_mask_effect</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, gt_style.o(.text.gt_obj_get_mask_effect))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gt_obj_get_mask_effect &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_obj_event_cb
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_cb
</UL>

<P><STRONG><a name="[1bb]"></a>gt_obj_get_parent</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, gt_obj.o(.text.gt_obj_get_parent))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gt_obj_get_parent &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_event_send
</UL>

<P><STRONG><a name="[119]"></a>gt_obj_get_reduce</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, gt_style.o(.text.gt_obj_get_reduce))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gt_obj_get_reduce &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_and_copy_foreach
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_cb
</UL>

<P><STRONG><a name="[162]"></a>gt_obj_get_scroll_snap_x</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gt_style.o(.text.gt_obj_get_scroll_snap_x))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_indev_scroll_throw_exec_cb
</UL>

<P><STRONG><a name="[161]"></a>gt_obj_get_scroll_snap_y</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gt_style.o(.text.gt_obj_get_scroll_snap_y))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_indev_scroll_throw_exec_cb
</UL>

<P><STRONG><a name="[16c]"></a>gt_obj_get_septal_line</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, gt_style.o(.text.gt_obj_get_septal_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gt_obj_get_septal_line &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_cb
</UL>

<P><STRONG><a name="[16b]"></a>gt_obj_get_state</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, gt_style.o(.text.gt_obj_get_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gt_obj_get_state &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_obj_event_cb
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_cb
</UL>

<P><STRONG><a name="[14e]"></a>gt_obj_get_touch_parent</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, gt_style.o(.text.gt_obj_get_touch_parent))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gt_obj_get_touch_parent &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_foreach_clicked
</UL>

<P><STRONG><a name="[170]"></a>gt_obj_get_trigger_mode</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, gt_style.o(.text.gt_obj_get_trigger_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gt_obj_get_trigger_mode &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_obj_event_cb
</UL>

<P><STRONG><a name="[115]"></a>gt_obj_get_virtual</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, gt_style.o(.text.gt_obj_get_virtual))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gt_obj_get_virtual &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_foreach_clicked
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_row_grow_inside_invert
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_row_grow_inside
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_calc_max_area_recursive
</UL>

<P><STRONG><a name="[114]"></a>gt_obj_get_visible</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, gt_style.o(.text.gt_obj_get_visible))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gt_obj_get_visible &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_foreach_clicked
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_row_grow_inside_invert
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_row_grow_inside
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_hided_layer_top_widgets
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_check_and_copy_foreach
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_and_copy_foreach
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_calc_max_area_recursive
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_find_showing_recursive_by_type
</UL>

<P><STRONG><a name="[174]"></a>gt_obj_get_w</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, gt_style.o(.text.gt_obj_get_w))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gt_obj_get_w &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_layout_row_grow
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_row_grow_inside_invert
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_row_grow_inside
</UL>

<P><STRONG><a name="[1a4]"></a>gt_obj_get_x</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, gt_style.o(.text.gt_obj_get_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gt_obj_get_x &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_invalid_area
</UL>

<P><STRONG><a name="[175]"></a>gt_obj_get_y</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, gt_style.o(.text.gt_obj_get_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gt_obj_get_y &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_row_grow_inside_invert
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_row_grow_inside
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_invalid_area
</UL>

<P><STRONG><a name="[1bc]"></a>gt_obj_is_bubble_notify</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, gt_style.o(.text.gt_obj_is_bubble_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gt_obj_is_bubble_notify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_event_send
</UL>

<P><STRONG><a name="[1a3]"></a>gt_obj_is_child</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, gt_obj.o(.text.gt_obj_is_child))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gt_obj_is_child &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_invalid_area
</UL>

<P><STRONG><a name="[10c]"></a>gt_obj_is_type</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, gt_obj_class.o(.text.gt_obj_is_type))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_screen_get_bgcolor
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_screen_set_bgcolor
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_screen_event_cb
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_cb
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_imgbtn_set_src_press
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_imgbtn_set_src
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_img_set_src
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_event_cb
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_find_showing_recursive_by_type
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_player_turn_prev
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_player_turn_next
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_player_set_type
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_player_set_mode
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_player_set_index
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_player_get_index
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_player_add_item
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_auto_play_callback
</UL>

<P><STRONG><a name="[1cd]"></a>gt_obj_is_untouchability</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gt_style.o(.text.gt_obj_is_untouchability))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_indev_handler
</UL>

<P><STRONG><a name="[1ce]"></a>gt_obj_next_focus_change</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, gt_obj_pos.o(.text.gt_obj_next_focus_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = gt_obj_next_focus_change &rArr; gt_obj_set_focus &rArr; gt_disp_invalid_area &rArr; _gt_disp_refr_append_area &rArr; gt_area_join
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_focus
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_next_focus_get
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_scr
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_indev_handler
</UL>

<P><STRONG><a name="[1cf]"></a>gt_obj_prev_focus_change</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, gt_obj_pos.o(.text.gt_obj_prev_focus_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = gt_obj_prev_focus_change &rArr; gt_obj_set_focus &rArr; gt_disp_invalid_area &rArr; _gt_disp_refr_append_area &rArr; gt_area_join
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_focus
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_scr
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_indev_handler
</UL>

<P><STRONG><a name="[165]"></a>gt_obj_scroll_to</STRONG> (Thumb, 308 bytes, Stack size 112 bytes, gt_obj_scroll.o(.text.gt_obj_scroll_to))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = gt_obj_scroll_to &rArr; gt_event_send &rArr; gt_obj_is_bubble_notify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_anim_speed_to_time
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_anim_del
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_event_send
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_res_ver
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_res_hor
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_anim_start
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_anim_set_path_type
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_anim_init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_scroll_to_y
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_scroll_to_x
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_indev_handler
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_indev_scroll_throw_exec_cb
</UL>

<P><STRONG><a name="[180]"></a>gt_obj_scroll_to_x</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gt_obj_scroll.o(.text.gt_obj_scroll_to_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = gt_obj_scroll_to_x &rArr; gt_obj_scroll_to &rArr; gt_event_send &rArr; gt_obj_is_bubble_notify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_scroll_to
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_screen_event_cb
</UL>

<P><STRONG><a name="[17f]"></a>gt_obj_scroll_to_y</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gt_obj_scroll.o(.text.gt_obj_scroll_to_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = gt_obj_scroll_to_y &rArr; gt_obj_scroll_to &rArr; gt_event_send &rArr; gt_obj_is_bubble_notify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_scroll_to
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_screen_event_cb
</UL>

<P><STRONG><a name="[1e6]"></a>gt_obj_set_area</STRONG> (Thumb, 224 bytes, Stack size 48 bytes, gt_style.o(.text.gt_obj_set_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = gt_obj_set_area &rArr; _update_layer_top_widget_area &rArr; gt_event_send &rArr; gt_obj_is_bubble_notify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_update_layer_top_widget_area
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_event_send
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_update_max_area
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_refr_append_area
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_pos
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_y
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_x
</UL>

<P><STRONG><a name="[1e5]"></a>gt_obj_set_focus</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, gt_style.o(.text.gt_obj_set_focus))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = gt_obj_set_focus &rArr; gt_disp_invalid_area &rArr; _gt_disp_refr_append_area &rArr; gt_area_join
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_event_send
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_invalid_area
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_prev_focus_change
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_next_focus_change
</UL>

<P><STRONG><a name="[1e4]"></a>gt_obj_set_overflow</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, gt_style.o(.text.gt_obj_set_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gt_obj_set_overflow &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_class_create
</UL>

<P><STRONG><a name="[173]"></a>gt_obj_set_pos</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, gt_style.o(.text.gt_obj_set_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = gt_obj_set_pos &rArr; gt_obj_set_area &rArr; _update_layer_top_widget_area &rArr; gt_event_send &rArr; gt_obj_is_bubble_notify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_area
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_move_child_by
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_update_layer_top_widget_area
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_row_grow_inside_invert
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_row_grow_inside
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_init_screen_home
</UL>

<P><STRONG><a name="[1d1]"></a>gt_obj_set_scroll_lr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gt_style.o(.text.gt_obj_set_scroll_lr))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_indev_handler
</UL>

<P><STRONG><a name="[1d0]"></a>gt_obj_set_scroll_ud</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gt_style.o(.text.gt_obj_set_scroll_ud))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_indev_handler
</UL>

<P><STRONG><a name="[1da]"></a>gt_obj_set_size</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, gt_style.o(.text.gt_obj_set_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = gt_obj_set_size &rArr; gt_event_send &rArr; gt_obj_is_bubble_notify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_event_send
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_update_max_area
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_refr_append_area
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_init_screen_home
</UL>

<P><STRONG><a name="[171]"></a>gt_obj_set_state</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, gt_style.o(.text.gt_obj_set_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gt_obj_set_state &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_obj_event_cb
</UL>

<P><STRONG><a name="[1a0]"></a>gt_obj_set_virtual</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, gt_style.o(.text.gt_obj_set_virtual))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gt_obj_set_virtual &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_drv_register
</UL>

<P><STRONG><a name="[179]"></a>gt_obj_set_x</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, gt_style.o(.text.gt_obj_set_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = gt_obj_set_x &rArr; gt_obj_set_area &rArr; _update_layer_top_widget_area &rArr; gt_event_send &rArr; gt_obj_is_bubble_notify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_area
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_update_layer_top_widget_area
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_load_scr_anim
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scr_anim_exec_x_cb
</UL>

<P><STRONG><a name="[17a]"></a>gt_obj_set_y</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, gt_style.o(.text.gt_obj_set_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = gt_obj_set_y &rArr; gt_obj_set_area &rArr; _update_layer_top_widget_area &rArr; gt_event_send &rArr; gt_obj_is_bubble_notify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_area
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_update_layer_top_widget_area
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_load_scr_anim
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scr_anim_exec_y_cb
</UL>

<P><STRONG><a name="[126]"></a>gt_obj_size_change</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, gt_style.o(.text.gt_obj_size_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = gt_obj_size_change &rArr; _gt_disp_refr_append_area &rArr; gt_area_join
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_refr_append_area
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_event_cb
</UL>

<P><STRONG><a name="[1ba]"></a>gt_per_255</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gt_math.o(.text.gt_per_255))
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_draw_blend_with_rgb565_opacity
</UL>

<P><STRONG><a name="[1dd]"></a>gt_player_add_item</STRONG> (Thumb, 340 bytes, Stack size 32 bytes, gt_player.o(.text.gt_player_add_item))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gt_player_add_item &rArr; _mem_realloc &rArr; gt_tlsf_realloc &rArr; gt_tlsf_free
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memset
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memcpy
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_realloc
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_malloc
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_is_type
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_init_screen_home
</UL>

<P><STRONG><a name="[1dc]"></a>gt_player_create</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, gt_player.o(.text.gt_player_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = gt_player_create &rArr; gt_obj_class_create &rArr; gt_layout_row_grow &rArr; _row_grow_inside_invert &rArr;  _row_grow_inside_invert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_class_create
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_timer_set_paused
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_init_screen_home
</UL>

<P><STRONG><a name="[1e7]"></a>gt_player_get_index</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gt_player.o(.text.gt_player_get_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gt_player_get_index
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_is_type
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_pack
</UL>

<P><STRONG><a name="[fa]"></a>gt_player_set_index</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, gt_player.o(.text.gt_player_set_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = gt_player_set_index &rArr; gt_event_send &rArr; gt_obj_is_bubble_notify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_event_send
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_is_type
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Refresh_New_Page
</UL>

<P><STRONG><a name="[1df]"></a>gt_player_set_mode</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, gt_player.o(.text.gt_player_set_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gt_player_set_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_is_type
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_init_screen_home
</UL>

<P><STRONG><a name="[1de]"></a>gt_player_set_type</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gt_player.o(.text.gt_player_set_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gt_player_set_type
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_is_type
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_init_screen_home
</UL>

<P><STRONG><a name="[1e8]"></a>gt_player_turn_next</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gt_player.o(.text.gt_player_turn_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = gt_player_turn_next &rArr; _turn_next_item &rArr; gt_disp_invalid_area &rArr; _gt_disp_refr_append_area &rArr; gt_area_join
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_is_type
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_turn_next_item
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imgbtn2_1_cb
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imgbtn2_0_cb
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imgbtn1_1_cb
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imgbtn1_0_cb
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imgbtn13_0_cb
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imgbtn11_0_cb
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imgbtn10_0_cb
</UL>

<P><STRONG><a name="[1e9]"></a>gt_player_turn_prev</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gt_player.o(.text.gt_player_turn_prev))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = gt_player_turn_prev &rArr; _turn_prev_item &rArr; _turn_next_item &rArr; gt_disp_invalid_area &rArr; _gt_disp_refr_append_area &rArr; gt_area_join
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_is_type
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_turn_prev_item
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imgbtn6_1_cb
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imgbtn6_0_cb
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imgbtn5_1_cb
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imgbtn5_0_cb
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imgbtn12_0_cb
</UL>

<P><STRONG><a name="[13b]"></a>gt_png_init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, gt_png.o(.text.gt_png_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gt_png_init &rArr; gt_img_decoder_create &rArr; _mem_malloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_img_decoder_set_read_line_cb
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_img_decoder_set_open_cb
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_img_decoder_set_info_cb
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_img_decoder_set_close_cb
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_img_decoder_register
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_img_decoder_create
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_extra_init
</UL>

<P><STRONG><a name="[1d5]"></a>gt_port_disp_init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, gt_port_disp.o(.text.gt_port_disp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = gt_port_disp_init &rArr; gt_disp_drv_register &rArr; gt_obj_class_create &rArr; gt_layout_row_grow &rArr; _row_grow_inside_invert &rArr;  _row_grow_inside_invert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_graph_buf_init
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_drv_register
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_drv_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_init
</UL>

<P><STRONG><a name="[1d6]"></a>gt_port_indev_init</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, gt_port_indev.o(.text.gt_port_indev_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = gt_port_indev_init &rArr; gt_indev_drv_register &rArr; _gt_timer_create &rArr; _mem_malloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_indev_drv_register
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_indev_drv_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_init
</UL>

<P><STRONG><a name="[1d8]"></a>gt_port_src_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gt_port_src.o(.text.gt_port_src_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gt_port_src_init &rArr; gt_src_init &rArr; _mem_malloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_src_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_init
</UL>

<P><STRONG><a name="[1d7]"></a>gt_port_vf_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gt_port_vf.o(.text.gt_port_vf_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gt_port_vf_init &rArr; gt_vf_init &rArr; _mem_malloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_vf_init
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_vf_drv_register
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_init
</UL>

<P><STRONG><a name="[bd]"></a>gt_read_data</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, bsp_sfc.o(.text.gt_read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = gt_read_data &rArr; bsp_spi_io_config &rArr; GPIO_Init &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_spi_io_config
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Byte
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFC_Init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Byte
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBit
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClrBit
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT_Font_Init
</UL>

<P><STRONG><a name="[138]"></a>gt_refr_timer</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, gt_refr.o(.text.gt_refr_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = gt_refr_timer &rArr; gt_disp_ref_area &rArr; _gt_disp_check_and_copy_foreach &rArr; _check_and_copy_foreach &rArr;  _check_and_copy_foreach (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_refr_get_area
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_refr_check
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_refr_area_pop
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_ref_area
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_default
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_task_handler
</UL>

<P><STRONG><a name="[1b3]"></a>gt_scr_stack_clear</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gt_scr_stack.o(.text.gt_scr_stack_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gt_scr_stack_clear &rArr; gt_stack_iterator
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_stack_iterator
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_stack_clear
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_gc_get_scr_info
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_stack_push_scr_only_st
</UL>

<P><STRONG><a name="[1ad]"></a>gt_scr_stack_get_home_scr_id</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gt_scr_stack.o(.text.gt_scr_stack_get_home_scr_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gt_scr_stack_get_home_scr_id
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_gc_get_scr_info
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_stack_push_scr_only_st
</UL>

<P><STRONG><a name="[1b5]"></a>gt_scr_stack_get_init_func</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, gt_scr_stack.o(.text.gt_scr_stack_get_init_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gt_scr_stack_get_init_func
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_gc_get_scr_info
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_stack_push_scr_only_st
</UL>

<P><STRONG><a name="[1ae]"></a>gt_scr_stack_has_before</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, gt_scr_stack.o(.text.gt_scr_stack_has_before))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gt_scr_stack_has_before &rArr; gt_stack_search_item_from_bottom
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_stack_search_item_from_bottom
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_gc_get_scr_info
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_stack_push_scr_only_st
</UL>

<P><STRONG><a name="[1b2]"></a>gt_scr_stack_is_empty</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gt_scr_stack.o(.text.gt_scr_stack_is_empty))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gt_scr_stack_is_empty
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_stack_is_empty
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_gc_get_scr_info
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_stack_push_scr_only_st
</UL>

<P><STRONG><a name="[1b1]"></a>gt_scr_stack_is_home_scr_alive</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gt_scr_stack.o(.text.gt_scr_stack_is_home_scr_alive))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gt_scr_stack_is_home_scr_alive
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_gc_get_scr_info
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_stack_push_scr_only_st
</UL>

<P><STRONG><a name="[1b0]"></a>gt_scr_stack_peek</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gt_scr_stack.o(.text.gt_scr_stack_peek))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gt_scr_stack_peek
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_stack_peek
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_gc_get_scr_info
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_stack_push_scr_only_st
</UL>

<P><STRONG><a name="[1af]"></a>gt_scr_stack_pop</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, gt_scr_stack.o(.text.gt_scr_stack_pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = gt_scr_stack_pop &rArr; _gt_obj_class_destroy &rArr; _destroy_and_free_children &rArr;  _destroy_and_free_children (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_stack_pop
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_stack_get_count
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_gc_get_scr_info
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_class_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_stack_push_scr_only_st
</UL>

<P><STRONG><a name="[1b4]"></a>gt_scr_stack_push</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gt_scr_stack.o(.text.gt_scr_stack_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gt_scr_stack_push &rArr; gt_stack_push &rArr; gt_memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_stack_push
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_gc_get_scr_info
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_stack_push_scr_only_st
</UL>

<P><STRONG><a name="[200]"></a>gt_scr_stack_register_id_list</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, gt_scr_stack.o(.text.gt_scr_stack_register_id_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = gt_scr_stack_register_id_list &rArr; gt_stack_create &rArr; _mem_malloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_stack_destroy
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_stack_create
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_gc_get_scr_info
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_ui_init
</UL>

<P><STRONG><a name="[1b6]"></a>gt_scr_stack_set_home_scr</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gt_scr_stack.o(.text.gt_scr_stack_set_home_scr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gt_scr_stack_set_home_scr
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_gc_get_scr_info
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_stack_push_scr_only_st
</UL>

<P><STRONG><a name="[203]"></a>gt_scr_stack_set_home_scr_id</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, gt_scr_stack.o(.text.gt_scr_stack_set_home_scr_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gt_scr_stack_set_home_scr_id
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_gc_get_scr_info
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_ui_init
</UL>

<P><STRONG><a name="[1a9]"></a>gt_screen_get_bgcolor</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gt_obj.o(.text.gt_screen_get_bgcolor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gt_screen_get_bgcolor
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_is_type
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_ref_area
</UL>

<P><STRONG><a name="[19f]"></a>gt_screen_set_bgcolor</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, gt_obj.o(.text.gt_screen_set_bgcolor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gt_screen_set_bgcolor
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_is_type
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_drv_register
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_init_screen_home
</UL>

<P><STRONG><a name="[13c]"></a>gt_sjpg_init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, gt_sjpg.o(.text.gt_sjpg_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gt_sjpg_init &rArr; gt_img_decoder_create &rArr; _mem_malloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_img_decoder_set_read_line_cb
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_img_decoder_set_open_cb
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_img_decoder_set_info_cb
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_img_decoder_set_close_cb
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_img_decoder_register
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_img_decoder_create
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_extra_init
</UL>

<P><STRONG><a name="[1c1]"></a>gt_src_get_drv</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gt_hal_src.o(.text.gt_src_get_drv))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_read_img_wh
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_open
</UL>

<P><STRONG><a name="[1f1]"></a>gt_src_init</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, gt_hal_src.o(.text.gt_src_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gt_src_init &rArr; _mem_malloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memset_0
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_port_src_init
</UL>

<P><STRONG><a name="[1f9]"></a>gt_stack_clear</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, gt_stack.o(.text.gt_stack_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gt_stack_clear &rArr; gt_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_scr_stack_clear
</UL>

<P><STRONG><a name="[202]"></a>gt_stack_create</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, gt_stack.o(.text.gt_stack_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gt_stack_create &rArr; _mem_malloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memset
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_free
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_scr_stack_register_id_list
</UL>

<P><STRONG><a name="[201]"></a>gt_stack_destroy</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, gt_stack.o(.text.gt_stack_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gt_stack_destroy &rArr; _mem_free &rArr; gt_tlsf_free
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_scr_stack_register_id_list
</UL>

<P><STRONG><a name="[1fd]"></a>gt_stack_get_count</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gt_stack.o(.text.gt_stack_get_count))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_scr_stack_pop
</UL>

<P><STRONG><a name="[1fb]"></a>gt_stack_is_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gt_stack.o(.text.gt_stack_is_empty))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_scr_stack_is_empty
</UL>

<P><STRONG><a name="[1f8]"></a>gt_stack_iterator</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, gt_stack.o(.text.gt_stack_iterator))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gt_stack_iterator
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_scr_stack_clear
</UL>

<P><STRONG><a name="[1fc]"></a>gt_stack_peek</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, gt_stack.o(.text.gt_stack_peek))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_scr_stack_peek
</UL>

<P><STRONG><a name="[1fe]"></a>gt_stack_pop</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, gt_stack.o(.text.gt_stack_pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gt_stack_pop
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_scr_stack_pop
</UL>

<P><STRONG><a name="[1ff]"></a>gt_stack_push</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, gt_stack.o(.text.gt_stack_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gt_stack_push &rArr; gt_memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_scr_stack_push
</UL>

<P><STRONG><a name="[1fa]"></a>gt_stack_search_item_from_bottom</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, gt_stack.o(.text.gt_stack_search_item_from_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gt_stack_search_item_from_bottom
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_scr_stack_has_before
</UL>

<P><STRONG><a name="[204]"></a>gt_task_handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gt_handler.o(.text.gt_task_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gt_task_handler &rArr; _gt_timer_handler &rArr; _mem_free &rArr; gt_tlsf_free
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_timer_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10e]"></a>gt_tick_elapse</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, gt_hal_tick.o(.text.gt_tick_elapse))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_anim_task_handler
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_auto_play_callback
</UL>

<P><STRONG><a name="[112]"></a>gt_tick_get</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, gt_hal_tick.o(.text.gt_tick_get))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_indev_handler
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_timer_handler
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_anim_start
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_anim_task_handler
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_timer_set_paused
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_timer_del
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_timer_create
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_auto_play_callback
</UL>

<P><STRONG><a name="[102]"></a>gt_tick_inc</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gt_hal_tick.o(.text.gt_tick_inc))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMR4_Handler
</UL>

<P><STRONG><a name="[205]"></a>gt_tlsf_create</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, gt_tlsf.o(.text.gt_tlsf_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gt_tlsf_create &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_tlsf_create_with_pool
</UL>

<P><STRONG><a name="[1e1]"></a>gt_tlsf_create_with_pool</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, gt_tlsf.o(.text.gt_tlsf_create_with_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gt_tlsf_create_with_pool &rArr; gt_tlsf_create &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_tlsf_create
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_mem_init
</UL>

<P><STRONG><a name="[16d]"></a>gt_tlsf_free</STRONG> (Thumb, 400 bytes, Stack size 16 bytes, gt_tlsf.o(.text.gt_tlsf_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gt_tlsf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_tlsf_realloc
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_free
</UL>

<P><STRONG><a name="[16e]"></a>gt_tlsf_malloc</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, gt_tlsf.o(.text.gt_tlsf_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gt_tlsf_malloc &rArr; block_prepare_used
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_prepare_used
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_locate_free
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_malloc
</UL>

<P><STRONG><a name="[16f]"></a>gt_tlsf_realloc</STRONG> (Thumb, 688 bytes, Stack size 24 bytes, gt_tlsf.o(.text.gt_tlsf_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gt_tlsf_realloc &rArr; gt_tlsf_free
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_tlsf_free
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memcpy
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_prepare_used
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_locate_free
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_realloc
</UL>

<P><STRONG><a name="[208]"></a>gt_ui_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gt_ui.o(.text.gt_ui_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = gt_ui_init &rArr; gt_disp_stack_load_scr &rArr; gt_disp_load_scr_anim &rArr; gt_disp_ref_area &rArr; _gt_disp_check_and_copy_foreach &rArr; _check_and_copy_foreach &rArr;  _check_and_copy_foreach (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_scr_stack_set_home_scr_id
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_scr_stack_register_id_list
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_stack_load_scr
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f3]"></a>gt_vf_drv_register</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gt_hal_vf.o(.text.gt_vf_drv_register))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_port_vf_init
</UL>

<P><STRONG><a name="[1c0]"></a>gt_vf_get_drv</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gt_hal_vf.o(.text.gt_vf_get_drv))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_read_img_wh
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_open
</UL>

<P><STRONG><a name="[1f2]"></a>gt_vf_init</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, gt_hal_vf.o(.text.gt_vf_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gt_vf_init &rArr; _mem_malloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_port_vf_init
</UL>

<P><STRONG><a name="[15c]"></a>jd_decomp</STRONG> (Thumb, 6810 bytes, Stack size 136 bytes, tjpgd.o(.text.jd_decomp))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = jd_decomp &rArr; huffext
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;huffext
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_sjpg_read_line
</UL>

<P><STRONG><a name="[15b]"></a>jd_prepare</STRONG> (Thumb, 4262 bytes, Stack size 144 bytes, tjpgd.o(.text.jd_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = jd_prepare
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_sjpg_read_line
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_sjpg_open
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_sjpg_info
</UL>

<P><STRONG><a name="[20c]"></a>lodepng_convert</STRONG> (Thumb, 10264 bytes, Stack size 144 bytes, lodepng.o(.text.lodepng_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = lodepng_convert &rArr; _mem_malloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_malloc
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tree_cleanup
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode
</UL>

<P><STRONG><a name="[20d]"></a>lodepng_decode</STRONG> (Thumb, 7068 bytes, Stack size 544 bytes, lodepng.o(.text.lodepng_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072<LI>Call Chain = lodepng_decode &rArr; readChunk_iTXt &rArr; lodepng_zlib_decompressv &rArr; lodepng_inflatev &rArr; HuffmanTree_makeFromLengths &rArr; _mem_malloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_free
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_realloc
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_malloc
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_inspect
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_convert
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unfilter
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_zTXt
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_tEXt
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_sBIT
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_iTXt
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_iCCP
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_cHRM
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_PLTE
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_zlib_decompressv
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adam7_getpassvalues
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode_memory
</UL>

<P><STRONG><a name="[154]"></a>lodepng_decode32</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, lodepng.o(.text.lodepng_decode32))
<BR><BR>[Stack]<UL><LI>Max Depth = 1480<LI>Call Chain = lodepng_decode32 &rArr; lodepng_decode_memory &rArr; lodepng_decode &rArr; readChunk_iTXt &rArr; lodepng_zlib_decompressv &rArr; lodepng_inflatev &rArr; HuffmanTree_makeFromLengths &rArr; _mem_malloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode_memory
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_png_open
</UL>

<P><STRONG><a name="[219]"></a>lodepng_decode_memory</STRONG> (Thumb, 198 bytes, Stack size 384 bytes, lodepng.o(.text.lodepng_decode_memory))
<BR><BR>[Stack]<UL><LI>Max Depth = 1456<LI>Call Chain = lodepng_decode_memory &rArr; lodepng_decode &rArr; readChunk_iTXt &rArr; lodepng_zlib_decompressv &rArr; lodepng_inflatev &rArr; HuffmanTree_makeFromLengths &rArr; _mem_malloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_free
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_info_cleanup
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode32
</UL>

<P><STRONG><a name="[155]"></a>lodepng_error_text</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lodepng.o(.text.lodepng_error_text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_png_open
</UL>

<P><STRONG><a name="[21a]"></a>lodepng_info_cleanup</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, lodepng.o(.text.lodepng_info_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lodepng_info_cleanup &rArr; LodePNGText_cleanup &rArr; _mem_free &rArr; gt_tlsf_free
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_free
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LodePNGText_cleanup
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LodePNGIText_cleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_inspect
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode_memory
</UL>

<P><STRONG><a name="[20e]"></a>lodepng_inspect</STRONG> (Thumb, 734 bytes, Stack size 24 bytes, lodepng.o(.text.lodepng_inspect))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lodepng_inspect &rArr; lodepng_info_cleanup &rArr; LodePNGText_cleanup &rArr; _mem_free &rArr; gt_tlsf_free
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_info_cleanup
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode
</UL>

<P><STRONG><a name="[153]"></a>lodepng_load_file</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, lodepng.o(.text.lodepng_load_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lodepng_load_file &rArr; gt_fs_close &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_tell
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_seek
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_read
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_open
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_close
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_png_open
</UL>

<P><STRONG><a name="[64]"></a>main</STRONG> (Thumb, 288 bytes, Stack size 8 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = main &rArr; GT_Font_Init &rArr; MD5Final &rArr; MD5Update &rArr; MD5Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swm_delay_ms
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_pack
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_ui_init
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_task_handler
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_init
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_uart3_init
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_uart0_init
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_sfc_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_rgb_init
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMR_Start
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMR_Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFC_ReadJEDEC
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFC_QuadSwitch
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Refresh_New_Page
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT_Font_Init
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_Init
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[c9]"></a>r_dat_bat</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, bsp_sfc.o(.text.r_dat_bat))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = r_dat_bat &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnicodeToGBK
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GBKToUnicode
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT_GetChinese
</UL>

<P><STRONG><a name="[92]"></a>read_cb</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, main.o(.text.read_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = read_cb &rArr; GT911_Scan &rArr; GT911_RD_Reg
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_Scan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_port_indev.o(.text.gt_port_indev_init)
</UL>
<P><STRONG><a name="[93]"></a>read_cb_btn</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text.read_cb_btn))
<BR>[Address Reference Count : 1]<UL><LI> gt_port_indev.o(.text.gt_port_indev_init)
</UL>
<P><STRONG><a name="[223]"></a>send_pack</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, gt_init_screen_home.o(.text.send_pack))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = send_pack &rArr; uart_send_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_pack
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_player_get_index
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[94]"></a>spi_wr</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, main.o(.text.spi_wr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = spi_wr &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_port_vf.o(.text.gt_port_vf_init)
</UL>
<P><STRONG><a name="[100]"></a>switchToPLL</STRONG> (Thumb, 266 bytes, Stack size 16 bytes, system_swm341.o(.text.switchToPLL))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = switchToPLL &rArr; PLLInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLLInit
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[e5]"></a>swm_delay_ms</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dev_systick.o(.text.swm_delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_RD_Reg
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_Init
</UL>

<P><STRONG><a name="[21d]"></a>systick_init</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, dev_systick.o(.text.systick_init))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[225]"></a>uart_send_pack</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, bsp_uart.o(.text.uart_send_pack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart_send_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WriteByte
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IsTXBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_pack
</UL>

<P><STRONG><a name="[226]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[244]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[e9]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_Init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_size_change
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_virtual
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_state
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_size
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_overflow
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_area
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_trigger_mode
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_state
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_septal_line
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_mask_effect
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_child_set_prop
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_move_child_by
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_update_layer_top_widget_area
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_scr_stack_register_id_list
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_alive_scr_object_cb
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_refr_timer
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_focus
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_touch_parent
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_tlsf_create_with_pool
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_pos
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_w
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_virtual
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_h
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_layout_row_grow
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_scroll_to
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_indev_handler
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_hided_layer_top_widgets
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_close
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_is_bubble_notify
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_parent
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_add_event_cb
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_event_send
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_img_decoder_read_line
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_img_decoder_close
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_update_max_area
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_radius_mask_init
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_y
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_x
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_is_child
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_y
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_x
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_visible
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_reduce
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_stack_push_scr_only_st
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_scroll_area_act
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_ref_area
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_area_max
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_area_act
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_anim_start
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_reload_max_area
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scr_anim_ready_cb
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_old_scr_anim_ready_cb
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_drv_register
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_tlsf_create
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_open_cb
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_open_cb
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_hal_fp_init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_calc_max_area_recursive
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_png_open
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_timer_set_user_data
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_timer_set_repeat_count
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_timer_set_paused
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_timer_get_user_data
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_timer_get_period
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_timer_del
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_timer_create
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deinit_cb
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_player_add_item
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_destroy_handler_cb
</UL>

<P><STRONG><a name="[245]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[246]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[247]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[248]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[249]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[222]"></a>puts</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, puts.o(i.puts))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = puts &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[118]"></a>_check_and_copy_foreach</STRONG> (Thumb, 230 bytes, Stack size 80 bytes, gt_disp.o(.text._check_and_copy_foreach))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + In Cycle
<LI>Call Chain = _check_and_copy_foreach &rArr;  _check_and_copy_foreach (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_visible
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_reduce
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_class_get_type
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_area_is_intersect_screen
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_area_cover_screen
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_and_copy_foreach
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_check_and_copy_foreach
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_and_copy_foreach
</UL>

<P><STRONG><a name="[130]"></a>_gt_disp_check_and_copy_foreach</STRONG> (Thumb, 170 bytes, Stack size 64 bytes, gt_disp.o(.text._gt_disp_check_and_copy_foreach))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = _gt_disp_check_and_copy_foreach &rArr; _check_and_copy_foreach &rArr;  _check_and_copy_foreach (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_visible
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_area_is_intersect_screen
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_and_copy_foreach
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_ref_area
</UL>

<P><STRONG><a name="[71]"></a>_old_scr_anim_ready_cb</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, gt_disp.o(.text._old_scr_anim_ready_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _old_scr_anim_ready_cb &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_area_copy
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_disp.o(.text.gt_disp_load_scr_anim)
</UL>
<P><STRONG><a name="[75]"></a>_scr_anim_del_ready_cb</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gt_disp.o(.text._scr_anim_del_ready_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _scr_anim_del_ready_cb &rArr; gt_obj_destroy &rArr; gt_obj_child_set_prop &rArr;  gt_obj_child_set_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_destroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_disp.o(.text.gt_disp_load_scr_anim)
</UL>
<P><STRONG><a name="[74]"></a>_scr_anim_exec_x_cb</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gt_disp.o(.text._scr_anim_exec_x_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _scr_anim_exec_x_cb &rArr; gt_obj_set_x &rArr; gt_obj_set_area &rArr; _update_layer_top_widget_area &rArr; gt_event_send &rArr; gt_obj_is_bubble_notify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_x
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_disp.o(.text.gt_disp_load_scr_anim)
</UL>
<P><STRONG><a name="[76]"></a>_scr_anim_exec_y_cb</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gt_disp.o(.text._scr_anim_exec_y_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _scr_anim_exec_y_cb &rArr; gt_obj_set_y &rArr; gt_obj_set_area &rArr; _update_layer_top_widget_area &rArr; gt_event_send &rArr; gt_obj_is_bubble_notify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_y
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_disp.o(.text.gt_disp_load_scr_anim)
</UL>
<P><STRONG><a name="[73]"></a>_scr_anim_ready_cb</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, gt_disp.o(.text._scr_anim_ready_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _scr_anim_ready_cb &rArr; gt_obj_destroy &rArr; gt_obj_child_set_prop &rArr;  gt_obj_child_set_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_destroy
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_indev_set_disabled
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_invalid_area
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_res_ver
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_res_hor
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_default
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_reload_max_area
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_disp.o(.text.gt_disp_load_scr_anim)
</UL>
<P><STRONG><a name="[72]"></a>_scr_anim_start_cb</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gt_disp.o(.text._scr_anim_start_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _scr_anim_start_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_indev_set_disabled
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_default
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_disp.o(.text.gt_disp_load_scr_anim)
</UL>
<P><STRONG><a name="[13d]"></a>_gt_get_radius_mask_buf</STRONG> (Thumb, 1428 bytes, Stack size 48 bytes, gt_draw.o(.text._gt_get_radius_mask_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _gt_get_radius_mask_buf &rArr; gt_memset_0
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memset_0
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
</UL>

<P><STRONG><a name="[157]"></a>_gt_radius_mask_init</STRONG> (Thumb, 1252 bytes, Stack size 80 bytes, gt_draw.o(.text._gt_radius_mask_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _gt_radius_mask_init &rArr; _mem_malloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memset_0
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_free
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_area_copy
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_malloc
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
</UL>

<P><STRONG><a name="[6b]"></a>_gt_img_decoder_built_in_close</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gt_img_decoder.o(.text._gt_img_decoder_built_in_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _gt_img_decoder_built_in_close &rArr; gt_fs_close &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_img_decoder.o(.text._gt_img_decoder_init)
</UL>
<P><STRONG><a name="[68]"></a>_gt_img_decoder_built_in_info</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, gt_img_decoder.o(.text._gt_img_decoder_built_in_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _gt_img_decoder_built_in_info &rArr; gt_fs_close &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_open
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_img_decoder.o(.text._gt_img_decoder_init)
</UL>
<P><STRONG><a name="[69]"></a>_gt_img_decoder_built_in_open</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, gt_img_decoder.o(.text._gt_img_decoder_built_in_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _gt_img_decoder_built_in_open &rArr; gt_fs_open
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_img_decoder.o(.text._gt_img_decoder_init)
</UL>
<P><STRONG><a name="[6a]"></a>_gt_img_decoder_built_in_read_line</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, gt_img_decoder.o(.text._gt_img_decoder_built_in_read_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _gt_img_decoder_built_in_read_line &rArr; gt_fs_read
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_seek
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_img_decoder.o(.text._gt_img_decoder_init)
</UL>
<P><STRONG><a name="[164]"></a>_absorb_handler</STRONG> (Thumb, 314 bytes, Stack size 16 bytes, gt_indev.o(.text._absorb_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _absorb_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_indev_scroll_throw_exec_cb
</UL>

<P><STRONG><a name="[7a]"></a>_indev_scroll_throw_exec_cb</STRONG> (Thumb, 626 bytes, Stack size 32 bytes, gt_indev.o(.text._indev_scroll_throw_exec_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = _indev_scroll_throw_exec_cb &rArr; gt_obj_scroll_to &rArr; gt_event_send &rArr; gt_obj_is_bubble_notify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_scroll_to
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_scroll_snap_y
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_scroll_snap_x
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_absorb_handler
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_abs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_indev.o(.text.gt_indev_handler)
</UL>
<P><STRONG><a name="[7b]"></a>_indev_scroll_throw_ready_cb</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gt_indev.o(.text._indev_scroll_throw_ready_cb))
<BR>[Address Reference Count : 1]<UL><LI> gt_indev.o(.text.gt_indev_handler)
</UL>
<P><STRONG><a name="[172]"></a>_row_grow_inside</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, gt_layout.o(.text._row_grow_inside))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + In Cycle
<LI>Call Chain = _row_grow_inside &rArr;  _row_grow_inside (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_pos
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_w
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_virtual
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_h
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_row_grow_inside
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_y
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_visible
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_layout_row_grow
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_row_grow_inside
</UL>

<P><STRONG><a name="[177]"></a>_row_grow_inside_invert</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, gt_layout.o(.text._row_grow_inside_invert))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + In Cycle
<LI>Call Chain = _row_grow_inside_invert &rArr;  _row_grow_inside_invert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_pos
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_w
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_virtual
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_h
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_row_grow_inside_invert
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_y
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_visible
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_layout_row_grow
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_row_grow_inside_invert
</UL>

<P><STRONG><a name="[14d]"></a>_gt_obj_foreach_clicked</STRONG> (Thumb, 272 bytes, Stack size 56 bytes, gt_obj_pos.o(.text._gt_obj_foreach_clicked))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + In Cycle
<LI>Call Chain = _gt_obj_foreach_clicked &rArr;  _gt_obj_foreach_clicked (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_touch_parent
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_foreach_clicked
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_virtual
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_visible
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_foreach_clicked
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_find_clicked_obj_by_point
</UL>

<P><STRONG><a name="[150]"></a>_gt_obj_next_focus_get</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, gt_obj_pos.o(.text._gt_obj_next_focus_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = _gt_obj_next_focus_get &rArr;  _gt_obj_next_focus_get (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_next_focus_get
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_next_focus_get
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_next_focus_change
</UL>

<P><STRONG><a name="[8a]"></a>_scroll_by_x</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gt_obj_scroll.o(.text._scroll_by_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _scroll_by_x &rArr; gt_event_send &rArr; gt_obj_is_bubble_notify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_event_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_obj_scroll.o(.text.gt_obj_scroll_to)
</UL>
<P><STRONG><a name="[8b]"></a>_scroll_by_y</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gt_obj_scroll.o(.text._scroll_by_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _scroll_by_y &rArr; gt_event_send &rArr; gt_obj_is_bubble_notify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_event_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_obj_scroll.o(.text.gt_obj_scroll_to)
</UL>
<P><STRONG><a name="[96]"></a>_equal_current_id_cb</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gt_scr_stack.o(.text._equal_current_id_cb))
<BR>[Address Reference Count : 1]<UL><LI> gt_scr_stack.o(.text.gt_scr_stack_has_before)
</UL>
<P><STRONG><a name="[95]"></a>_free_alive_scr_object_cb</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, gt_scr_stack.o(.text._free_alive_scr_object_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _free_alive_scr_object_cb &rArr; _gt_obj_class_destroy &rArr; _destroy_and_free_children &rArr;  _destroy_and_free_children (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_class_destroy
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_scr_stack.o(.text.gt_scr_stack_clear)
</UL>
<P><STRONG><a name="[183]"></a>_update_layer_top_widget_area</STRONG> (Thumb, 332 bytes, Stack size 48 bytes, gt_style.o(.text._update_layer_top_widget_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _update_layer_top_widget_area &rArr; gt_event_send &rArr; gt_obj_is_bubble_notify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_move_child_by
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_event_send
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_update_max_area
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_default
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_refr_append_area
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_area
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_pos
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_y
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_x
</UL>

<P><STRONG><a name="[9a]"></a>_gt_sjpg_close</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, gt_sjpg.o(.text._gt_sjpg_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _gt_sjpg_close &rArr; gt_fs_close &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_close
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sjpg_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_sjpg.o(.text.gt_sjpg_init)
</UL>
<P><STRONG><a name="[97]"></a>_gt_sjpg_info</STRONG> (Thumb, 460 bytes, Stack size 208 bytes, gt_sjpg.o(.text._gt_sjpg_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = _gt_sjpg_info &rArr; jd_prepare
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memcmp
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_seek
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_read
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_open
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_get_ext
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_close
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_free
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_malloc
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jd_prepare
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_sjpg.o(.text.gt_sjpg_init)
</UL>
<P><STRONG><a name="[98]"></a>_gt_sjpg_open</STRONG> (Thumb, 714 bytes, Stack size 208 bytes, gt_sjpg.o(.text._gt_sjpg_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = _gt_sjpg_open &rArr; jd_prepare
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memcmp
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_seek
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_read
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_open
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_close
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memset
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_free
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_malloc
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jd_prepare
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sjpg_free
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_sjpg.o(.text.gt_sjpg_init)
</UL>
<P><STRONG><a name="[99]"></a>_gt_sjpg_read_line</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, gt_sjpg.o(.text._gt_sjpg_read_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _gt_sjpg_read_line &rArr; jd_decomp &rArr; huffext
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_seek
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memcpy
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jd_prepare
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jd_decomp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_sjpg.o(.text.gt_sjpg_init)
</UL>
<P><STRONG><a name="[158]"></a>_sjpg_free</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, gt_sjpg.o(.text._sjpg_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _sjpg_free &rArr; _mem_free &rArr; gt_tlsf_free
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_sjpg_open
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_sjpg_close
</UL>

<P><STRONG><a name="[6c]"></a>input_func</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, gt_sjpg.o(.text.input_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = input_func &rArr; gt_fs_read
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_seek
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_read
</UL>
<BR>[Address Reference Count : 3]<UL><LI> gt_sjpg.o(.text._gt_sjpg_info)
<LI> gt_sjpg.o(.text._gt_sjpg_open)
<LI> gt_sjpg.o(.text._gt_sjpg_read_line)
</UL>
<P><STRONG><a name="[6d]"></a>output_func</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, gt_sjpg.o(.text.output_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = output_func &rArr; gt_memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_sjpg.o(.text._gt_sjpg_read_line)
</UL>
<P><STRONG><a name="[209]"></a>huffext</STRONG> (Thumb, 1778 bytes, Stack size 48 bytes, tjpgd.o(.text.huffext))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = huffext
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jd_decomp
</UL>

<P><STRONG><a name="[90]"></a>_gt_png_close</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, gt_png.o(.text._gt_png_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _gt_png_close &rArr; gt_fs_close &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_close
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_png.o(.text.gt_png_init)
</UL>
<P><STRONG><a name="[8d]"></a>_gt_png_info</STRONG> (Thumb, 236 bytes, Stack size 56 bytes, gt_png.o(.text._gt_png_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _gt_png_info &rArr; gt_fs_close &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memcmp
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_seek
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_read
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_open
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_close
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memset_0
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_png.o(.text.gt_png_init)
</UL>
<P><STRONG><a name="[8e]"></a>_gt_png_open</STRONG> (Thumb, 780 bytes, Stack size 96 bytes, gt_png.o(.text._gt_png_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 1576<LI>Call Chain = _gt_png_open &rArr; lodepng_decode32 &rArr; lodepng_decode_memory &rArr; lodepng_decode &rArr; readChunk_iTXt &rArr; lodepng_zlib_decompressv &rArr; lodepng_inflatev &rArr; HuffmanTree_makeFromLengths &rArr; _mem_malloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memcmp
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_seek
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_read
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_open
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_close
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_free
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_malloc
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_load_file
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_error_text
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode32
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_png.o(.text.gt_png_init)
</UL>
<P><STRONG><a name="[8f]"></a>_gt_png_read_line</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gt_png.o(.text._gt_png_read_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _gt_png_read_line &rArr; gt_memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_png.o(.text.gt_png_init)
</UL>
<P><STRONG><a name="[217]"></a>Adam7_getpassvalues</STRONG> (Thumb, 798 bytes, Stack size 20 bytes, lodepng.o(.text.Adam7_getpassvalues))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Adam7_getpassvalues
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode
</UL>

<P><STRONG><a name="[f1]"></a>HuffmanTree_makeFromLengths</STRONG> (Thumb, 2794 bytes, Stack size 120 bytes, lodepng.o(.text.HuffmanTree_makeFromLengths))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HuffmanTree_makeFromLengths &rArr; _mem_malloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_free
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_malloc
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_inflatev
</UL>

<P><STRONG><a name="[f6]"></a>LodePNGIText_cleanup</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, lodepng.o(.text.LodePNGIText_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LodePNGIText_cleanup &rArr; _mem_free &rArr; gt_tlsf_free
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_info_cleanup
</UL>

<P><STRONG><a name="[f7]"></a>LodePNGText_cleanup</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, lodepng.o(.text.LodePNGText_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LodePNGText_cleanup &rArr; _mem_free &rArr; gt_tlsf_free
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_info_cleanup
</UL>

<P><STRONG><a name="[18e]"></a>color_tree_cleanup</STRONG> (Thumb, 430 bytes, Stack size 8 bytes, lodepng.o(.text.color_tree_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = color_tree_cleanup &rArr;  color_tree_cleanup (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_free
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tree_cleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_convert
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tree_cleanup
</UL>

<P><STRONG><a name="[20a]"></a>lodepng_add_itext_sized</STRONG> (Thumb, 602 bytes, Stack size 40 bytes, lodepng.o(.text.lodepng_add_itext_sized))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lodepng_add_itext_sized &rArr; _mem_realloc &rArr; gt_tlsf_realloc &rArr; gt_tlsf_free
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_realloc
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_malloc
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_iTXt
</UL>

<P><STRONG><a name="[20b]"></a>lodepng_add_text_sized</STRONG> (Thumb, 312 bytes, Stack size 32 bytes, lodepng.o(.text.lodepng_add_text_sized))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lodepng_add_text_sized &rArr; _mem_realloc &rArr; gt_tlsf_realloc &rArr; gt_tlsf_free
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_realloc
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_malloc
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_zTXt
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_tEXt
</UL>

<P><STRONG><a name="[21b]"></a>lodepng_inflatev</STRONG> (Thumb, 5188 bytes, Stack size 224 bytes, lodepng.o(.text.lodepng_inflatev))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = lodepng_inflatev &rArr; HuffmanTree_makeFromLengths &rArr; _mem_malloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_free
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_realloc
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_malloc
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuffmanTree_makeFromLengths
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_zlib_decompressv
</UL>

<P><STRONG><a name="[216]"></a>lodepng_zlib_decompressv</STRONG> (Thumb, 382 bytes, Stack size 48 bytes, lodepng.o(.text.lodepng_zlib_decompressv))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = lodepng_zlib_decompressv &rArr; lodepng_inflatev &rArr; HuffmanTree_makeFromLengths &rArr; _mem_malloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_inflatev
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_zTXt
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_iTXt
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_iCCP
</UL>

<P><STRONG><a name="[20f]"></a>readChunk_PLTE</STRONG> (Thumb, 358 bytes, Stack size 24 bytes, lodepng.o(.text.readChunk_PLTE))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = readChunk_PLTE &rArr; _mem_malloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode
</UL>

<P><STRONG><a name="[210]"></a>readChunk_cHRM</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, lodepng.o(.text.readChunk_cHRM))
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode
</UL>

<P><STRONG><a name="[213]"></a>readChunk_iCCP</STRONG> (Thumb, 558 bytes, Stack size 88 bytes, lodepng.o(.text.readChunk_iCCP))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = readChunk_iCCP &rArr; lodepng_zlib_decompressv &rArr; lodepng_inflatev &rArr; HuffmanTree_makeFromLengths &rArr; _mem_malloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_free
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_malloc
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_zlib_decompressv
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode
</UL>

<P><STRONG><a name="[211]"></a>readChunk_iTXt</STRONG> (Thumb, 846 bytes, Stack size 104 bytes, lodepng.o(.text.readChunk_iTXt))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = readChunk_iTXt &rArr; lodepng_zlib_decompressv &rArr; lodepng_inflatev &rArr; HuffmanTree_makeFromLengths &rArr; _mem_malloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_free
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_malloc
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_zlib_decompressv
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_add_itext_sized
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode
</UL>

<P><STRONG><a name="[214]"></a>readChunk_sBIT</STRONG> (Thumb, 308 bytes, Stack size 16 bytes, lodepng.o(.text.readChunk_sBIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = readChunk_sBIT
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode
</UL>

<P><STRONG><a name="[215]"></a>readChunk_tEXt</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, lodepng.o(.text.readChunk_tEXt))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = readChunk_tEXt &rArr; lodepng_add_text_sized &rArr; _mem_realloc &rArr; gt_tlsf_realloc &rArr; gt_tlsf_free
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_free
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_malloc
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_add_text_sized
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode
</UL>

<P><STRONG><a name="[212]"></a>readChunk_zTXt</STRONG> (Thumb, 432 bytes, Stack size 88 bytes, lodepng.o(.text.readChunk_zTXt))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = readChunk_zTXt &rArr; lodepng_zlib_decompressv &rArr; lodepng_inflatev &rArr; HuffmanTree_makeFromLengths &rArr; _mem_malloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_free
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_malloc
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_zlib_decompressv
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_add_text_sized
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode
</UL>

<P><STRONG><a name="[218]"></a>unfilter</STRONG> (Thumb, 3916 bytes, Stack size 212 bytes, lodepng.o(.text.unfilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = unfilter
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode
</UL>

<P><STRONG><a name="[113]"></a>_calc_max_area_recursive</STRONG> (Thumb, 476 bytes, Stack size 48 bytes, gt_hal_disp.o(.text._calc_max_area_recursive))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + In Cycle
<LI>Call Chain = _calc_max_area_recursive &rArr;  _calc_max_area_recursive (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_is_ignore_calc_max_area
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_virtual
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_visible
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_gc_get_disp
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_calc_max_area_recursive
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_disp_reload_max_area
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_calc_max_area_recursive
</UL>

<P><STRONG><a name="[70]"></a>_gt_disp_task_handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gt_hal_disp.o(.text._gt_disp_task_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = _gt_disp_task_handler &rArr; gt_refr_timer &rArr; gt_disp_ref_area &rArr; _gt_disp_check_and_copy_foreach &rArr; _check_and_copy_foreach &rArr;  _check_and_copy_foreach (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_refr_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_hal_disp.o(.text.gt_disp_drv_register)
</UL>
<P><STRONG><a name="[9c]"></a>_close_cb</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gt_hal_src.o(.text._close_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _close_cb &rArr; _mem_free &rArr; gt_tlsf_free
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_hal_src.o(.text.gt_src_init)
</UL>
<P><STRONG><a name="[9b]"></a>_open_cb</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, gt_hal_src.o(.text._open_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _open_cb &rArr; _gt_hal_fp_init &rArr; _mem_malloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_hal_fp_init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_hal_src.o(.text.gt_src_init)
</UL>
<P><STRONG><a name="[9d]"></a>_read_cb</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, gt_hal_src.o(.text._read_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _read_cb &rArr; gt_memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_hal_src.o(.text.gt_src_init)
</UL>
<P><STRONG><a name="[9e]"></a>_seek_cb</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, gt_hal_src.o(.text._seek_cb))
<BR>[Address Reference Count : 1]<UL><LI> gt_hal_src.o(.text.gt_src_init)
</UL>
<P><STRONG><a name="[9f]"></a>_tell_cb</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gt_hal_src.o(.text._tell_cb))
<BR>[Address Reference Count : 1]<UL><LI> gt_hal_src.o(.text.gt_src_init)
</UL>
<P><STRONG><a name="[a1]"></a>_close_cb</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gt_hal_vf.o(.text._close_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _close_cb &rArr; _mem_free &rArr; gt_tlsf_free
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_hal_vf.o(.text.gt_vf_init)
</UL>
<P><STRONG><a name="[a0]"></a>_open_cb</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, gt_hal_vf.o(.text._open_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _open_cb &rArr; _gt_hal_fp_init &rArr; _mem_malloc &rArr; gt_tlsf_malloc &rArr; block_prepare_used
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_hal_fp_init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_hal_vf.o(.text.gt_vf_init)
</UL>
<P><STRONG><a name="[a2]"></a>_read_cb</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, gt_hal_vf.o(.text._read_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _read_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_hal_vf.o(.text.gt_vf_init)
</UL>
<P><STRONG><a name="[a4]"></a>_seek_cb</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, gt_hal_vf.o(.text._seek_cb))
<BR>[Address Reference Count : 1]<UL><LI> gt_hal_vf.o(.text.gt_vf_init)
</UL>
<P><STRONG><a name="[a5]"></a>_tell_cb</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gt_hal_vf.o(.text._tell_cb))
<BR>[Address Reference Count : 1]<UL><LI> gt_hal_vf.o(.text.gt_vf_init)
</UL>
<P><STRONG><a name="[a3]"></a>_write_cb</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, gt_hal_vf.o(.text._write_cb))
<BR>[Address Reference Count : 1]<UL><LI> gt_hal_vf.o(.text.gt_vf_init)
</UL>
<P><STRONG><a name="[ab]"></a>_gt_anim_path_bounce</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, gt_anim.o(.text._gt_anim_path_bounce))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _gt_anim_path_bounce &rArr; gt_bezier3
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_map
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_bezier3
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_anim.o(.rodata..Lswitch.table.gt_anim_set_path_type)
</UL>
<P><STRONG><a name="[a7]"></a>_gt_anim_path_ease_in</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, gt_anim.o(.text._gt_anim_path_ease_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _gt_anim_path_ease_in &rArr; gt_bezier3
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_map
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_bezier3
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_anim.o(.rodata..Lswitch.table.gt_anim_set_path_type)
</UL>
<P><STRONG><a name="[a9]"></a>_gt_anim_path_ease_in_out</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, gt_anim.o(.text._gt_anim_path_ease_in_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _gt_anim_path_ease_in_out &rArr; gt_bezier3
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_map
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_bezier3
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_anim.o(.rodata..Lswitch.table.gt_anim_set_path_type)
</UL>
<P><STRONG><a name="[a8]"></a>_gt_anim_path_ease_out</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, gt_anim.o(.text._gt_anim_path_ease_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _gt_anim_path_ease_out &rArr; gt_bezier3
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_map
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_bezier3
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_anim.o(.rodata..Lswitch.table.gt_anim_set_path_type)
</UL>
<P><STRONG><a name="[6f]"></a>_gt_anim_path_linear</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, gt_anim.o(.text._gt_anim_path_linear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _gt_anim_path_linear
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_map
</UL>
<BR>[Address Reference Count : 2]<UL><LI> gt_anim.o(.text.gt_anim_init)
<LI> gt_anim.o(.text.gt_anim_set_path_type)
</UL>
<P><STRONG><a name="[aa]"></a>_gt_anim_path_overshoot</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, gt_anim.o(.text._gt_anim_path_overshoot))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _gt_anim_path_overshoot &rArr; gt_bezier3
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_map
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_bezier3
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_anim.o(.rodata..Lswitch.table.gt_anim_set_path_type)
</UL>
<P><STRONG><a name="[67]"></a>_gt_anim_task_handler</STRONG> (Thumb, 432 bytes, Stack size 40 bytes, gt_anim.o(.text._gt_anim_task_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _gt_anim_task_handler &rArr; _gt_timer_set_paused &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_tick_get
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_free
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_tick_elapse
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_timer_set_paused
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_anim.o(.text._gt_anim_core_init)
</UL>
<P><STRONG><a name="[206]"></a>block_locate_free</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, gt_tlsf.o(.text.block_locate_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = block_locate_free
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_tlsf_realloc
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_tlsf_malloc
</UL>

<P><STRONG><a name="[207]"></a>block_prepare_used</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, gt_tlsf.o(.text.block_prepare_used))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = block_prepare_used
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_tlsf_realloc
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_tlsf_malloc
</UL>

<P><STRONG><a name="[6e]"></a>_default_equal_cb</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gt_vector.o(.text._default_equal_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _default_equal_cb &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_vector.o(.text._gt_vector_create)
</UL>
<P><STRONG><a name="[129]"></a>_find_showing_recursive_by_type</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, gt_dialog.o(.text._find_showing_recursive_by_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + In Cycle
<LI>Call Chain = _find_showing_recursive_by_type &rArr;  _find_showing_recursive_by_type (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_visible
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_find_showing_recursive_by_type
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_is_type
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_dialog_has_showing
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_find_showing_recursive_by_type
</UL>

<P><STRONG><a name="[ae]"></a>_deinit_cb</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, gt_img.o(.text._deinit_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _deinit_cb &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_free
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_img.o(.rodata.gt_img_class)
</UL>
<P><STRONG><a name="[af]"></a>_event_cb</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, gt_img.o(.text._event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _event_cb &rArr; gt_obj_size_change &rArr; _gt_disp_refr_append_area &rArr; gt_area_join
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_size_change
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_read_img_wh
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_event_send
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_event_get_code
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_invalid_area
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_is_type
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_img.o(.rodata.gt_img_class)
</UL>
<P><STRONG><a name="[ad]"></a>_init_cb</STRONG> (Thumb, 68 bytes, Stack size 48 bytes, gt_img.o(.text._init_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = _init_cb &rArr; draw_focus &rArr; draw_bg &rArr; gt_draw_blend &rArr; gt_draw_blend_with_rgb565_opacity
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_focus
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg_img
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_img.o(.rodata.gt_img_class)
</UL>
<P><STRONG><a name="[b1]"></a>_deinit_cb</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, gt_imgbtn.o(.text._deinit_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _deinit_cb &rArr; _gt_vector_free &rArr; _mem_free &rArr; gt_tlsf_free
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_free
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_vector_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_imgbtn.o(.rodata.gt_imgbtn_class)
</UL>
<P><STRONG><a name="[b2]"></a>_event_cb</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, gt_imgbtn.o(.text._event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _event_cb &rArr; gt_disp_invalid_area &rArr; _gt_disp_refr_append_area &rArr; gt_area_join
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_read_img_wh
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_event_send
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_event_get_code
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_invalid_area
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_vector_turn_next
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_vector_get_item
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_imgbtn.o(.rodata.gt_imgbtn_class)
</UL>
<P><STRONG><a name="[77]"></a>_imgs_equal_cb</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gt_imgbtn.o(.text._imgs_equal_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _imgs_equal_cb &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_imgbtn.o(.text.gt_imgbtn_create)
</UL>
<P><STRONG><a name="[78]"></a>_imgs_free_cb</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gt_imgbtn.o(.text._imgs_free_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _imgs_free_cb &rArr; _mem_free &rArr; gt_tlsf_free
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_imgbtn.o(.text.gt_imgbtn_create)
</UL>
<P><STRONG><a name="[b0]"></a>_init_cb</STRONG> (Thumb, 80 bytes, Stack size 48 bytes, gt_imgbtn.o(.text._init_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = _init_cb &rArr; draw_focus &rArr; draw_bg &rArr; gt_draw_blend &rArr; gt_draw_blend_with_rgb565_opacity
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_focus
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg_img
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_imgbtn.o(.rodata.gt_imgbtn_class)
</UL>
<P><STRONG><a name="[b3]"></a>_init_cb</STRONG> (Thumb, 354 bytes, Stack size 64 bytes, gt_obj.o(.text._init_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = _init_cb &rArr; draw_bg &rArr; gt_draw_blend &rArr; gt_draw_blend_with_rgb565_opacity
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_state
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_septal_line
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_mask_effect
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_graph_init_rect_attr
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_reduce
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_is_type
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_obj.o(.rodata.gt_obj_class)
</UL>
<P><STRONG><a name="[b4]"></a>_obj_event_cb</STRONG> (Thumb, 220 bytes, Stack size 8 bytes, gt_obj.o(.text._obj_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _obj_event_cb &rArr; gt_disp_invalid_area &rArr; _gt_disp_refr_append_area &rArr; gt_area_join
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_set_state
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_trigger_mode
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_state
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_get_mask_effect
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_event_send
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_event_get_code
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_invalid_area
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_obj.o(.rodata.gt_obj_class)
</UL>
<P><STRONG><a name="[b9]"></a>_screen_event_cb</STRONG> (Thumb, 328 bytes, Stack size 16 bytes, gt_obj.o(.text._screen_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = _screen_event_cb &rArr; gt_obj_scroll_to_y &rArr; gt_obj_scroll_to &rArr; gt_event_send &rArr; gt_obj_is_bubble_notify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_scroll_to_y
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_scroll_to_x
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_event_send
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_event_get_code
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_scroll_area_act
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_res_ver
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_res_hor
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_area_max
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_get_area_act
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_is_type
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_obj.o(.rodata.gt_screen_class)
</UL>
<P><STRONG><a name="[121]"></a>_destroy_and_free_children</STRONG> (Thumb, 310 bytes, Stack size 24 bytes, gt_obj_class.o(.text._destroy_and_free_children))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + In Cycle
<LI>Call Chain = _destroy_and_free_children &rArr;  _destroy_and_free_children (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_indev_remove_want_delate_target
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_event_send
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_free
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_destroy_and_free_children
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_obj_class_destroy
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_destroy_and_free_children
</UL>

<P><STRONG><a name="[8c]"></a>_auto_play_callback</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, gt_player.o(.text._auto_play_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = _auto_play_callback &rArr; _turn_prev_item &rArr; _turn_next_item &rArr; gt_disp_invalid_area &rArr; _gt_disp_refr_append_area &rArr; gt_area_join
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_tick_get
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_invalid_area
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_tick_elapse
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_timer_get_user_data
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_timer_get_period
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_obj_is_type
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_turn_prev_item
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_turn_next_item
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_player.o(.text.gt_player_create)
</UL>
<P><STRONG><a name="[b6]"></a>_deinit_cb</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, gt_player.o(.text._deinit_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _deinit_cb &rArr; _gt_timer_del &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_memset
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_free
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_timer_del
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_player.o(.rodata.gt_player_class)
</UL>
<P><STRONG><a name="[b7]"></a>_event_cb</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gt_player.o(.text._event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _event_cb &rArr; gt_disp_invalid_area &rArr; _gt_disp_refr_append_area &rArr; gt_area_join
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_event_get_code
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_invalid_area
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_player.o(.rodata.gt_player_class)
</UL>
<P><STRONG><a name="[b5]"></a>_init_cb</STRONG> (Thumb, 100 bytes, Stack size 48 bytes, gt_player.o(.text._init_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = _init_cb &rArr; draw_focus &rArr; draw_bg &rArr; gt_draw_blend &rArr; gt_draw_blend_with_rgb565_opacity
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_focus
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg_img
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_player.o(.rodata.gt_player_class)
</UL>
<P><STRONG><a name="[111]"></a>_turn_next_item</STRONG> (Thumb, 292 bytes, Stack size 16 bytes, gt_player.o(.text._turn_next_item))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _turn_next_item &rArr; gt_disp_invalid_area &rArr; _gt_disp_refr_append_area &rArr; gt_area_join
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_read_img_wh
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_invalid_area
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_timer_set_paused
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_timer_del
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_player_turn_next
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_turn_prev_item
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_auto_play_callback
</UL>

<P><STRONG><a name="[110]"></a>_turn_prev_item</STRONG> (Thumb, 288 bytes, Stack size 16 bytes, gt_player.o(.text._turn_prev_item))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _turn_prev_item &rArr; _turn_next_item &rArr; gt_disp_invalid_area &rArr; _gt_disp_refr_append_area &rArr; gt_area_join
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_fs_read_img_wh
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_disp_invalid_area
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_timer_set_paused
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gt_timer_del
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_turn_next_item
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_player_turn_prev
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_auto_play_callback
</UL>

<P><STRONG><a name="[84]"></a>imgbtn10_0_cb</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gt_init_screen_home.o(.text.imgbtn10_0_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = imgbtn10_0_cb &rArr; gt_player_turn_next &rArr; _turn_next_item &rArr; gt_disp_invalid_area &rArr; _gt_disp_refr_append_area &rArr; gt_area_join
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_player_turn_next
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_init_screen_home.o(.text.gt_init_screen_home)
</UL>
<P><STRONG><a name="[85]"></a>imgbtn11_0_cb</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gt_init_screen_home.o(.text.imgbtn11_0_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = imgbtn11_0_cb &rArr; gt_player_turn_next &rArr; _turn_next_item &rArr; gt_disp_invalid_area &rArr; _gt_disp_refr_append_area &rArr; gt_area_join
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_player_turn_next
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_init_screen_home.o(.text.gt_init_screen_home)
</UL>
<P><STRONG><a name="[86]"></a>imgbtn12_0_cb</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gt_init_screen_home.o(.text.imgbtn12_0_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = imgbtn12_0_cb &rArr; gt_player_turn_prev &rArr; _turn_prev_item &rArr; _turn_next_item &rArr; gt_disp_invalid_area &rArr; _gt_disp_refr_append_area &rArr; gt_area_join
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_player_turn_prev
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_init_screen_home.o(.text.gt_init_screen_home)
</UL>
<P><STRONG><a name="[87]"></a>imgbtn13_0_cb</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gt_init_screen_home.o(.text.imgbtn13_0_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = imgbtn13_0_cb &rArr; gt_player_turn_next &rArr; _turn_next_item &rArr; gt_disp_invalid_area &rArr; _gt_disp_refr_append_area &rArr; gt_area_join
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_player_turn_next
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_init_screen_home.o(.text.gt_init_screen_home)
</UL>
<P><STRONG><a name="[7c]"></a>imgbtn1_0_cb</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gt_init_screen_home.o(.text.imgbtn1_0_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = imgbtn1_0_cb &rArr; gt_player_turn_next &rArr; _turn_next_item &rArr; gt_disp_invalid_area &rArr; _gt_disp_refr_append_area &rArr; gt_area_join
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_player_turn_next
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_init_screen_home.o(.text.gt_init_screen_home)
</UL>
<P><STRONG><a name="[7d]"></a>imgbtn1_1_cb</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gt_init_screen_home.o(.text.imgbtn1_1_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = imgbtn1_1_cb &rArr; gt_player_turn_next &rArr; _turn_next_item &rArr; gt_disp_invalid_area &rArr; _gt_disp_refr_append_area &rArr; gt_area_join
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_player_turn_next
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_init_screen_home.o(.text.gt_init_screen_home)
</UL>
<P><STRONG><a name="[7e]"></a>imgbtn2_0_cb</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gt_init_screen_home.o(.text.imgbtn2_0_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = imgbtn2_0_cb &rArr; gt_player_turn_next &rArr; _turn_next_item &rArr; gt_disp_invalid_area &rArr; _gt_disp_refr_append_area &rArr; gt_area_join
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_player_turn_next
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_init_screen_home.o(.text.gt_init_screen_home)
</UL>
<P><STRONG><a name="[7f]"></a>imgbtn2_1_cb</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gt_init_screen_home.o(.text.imgbtn2_1_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = imgbtn2_1_cb &rArr; gt_player_turn_next &rArr; _turn_next_item &rArr; gt_disp_invalid_area &rArr; _gt_disp_refr_append_area &rArr; gt_area_join
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_player_turn_next
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_init_screen_home.o(.text.gt_init_screen_home)
</UL>
<P><STRONG><a name="[80]"></a>imgbtn5_0_cb</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gt_init_screen_home.o(.text.imgbtn5_0_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = imgbtn5_0_cb &rArr; gt_player_turn_prev &rArr; _turn_prev_item &rArr; _turn_next_item &rArr; gt_disp_invalid_area &rArr; _gt_disp_refr_append_area &rArr; gt_area_join
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_player_turn_prev
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_init_screen_home.o(.text.gt_init_screen_home)
</UL>
<P><STRONG><a name="[81]"></a>imgbtn5_1_cb</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gt_init_screen_home.o(.text.imgbtn5_1_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = imgbtn5_1_cb &rArr; gt_player_turn_prev &rArr; _turn_prev_item &rArr; _turn_next_item &rArr; gt_disp_invalid_area &rArr; _gt_disp_refr_append_area &rArr; gt_area_join
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_player_turn_prev
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_init_screen_home.o(.text.gt_init_screen_home)
</UL>
<P><STRONG><a name="[82]"></a>imgbtn6_0_cb</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gt_init_screen_home.o(.text.imgbtn6_0_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = imgbtn6_0_cb &rArr; gt_player_turn_prev &rArr; _turn_prev_item &rArr; _turn_next_item &rArr; gt_disp_invalid_area &rArr; _gt_disp_refr_append_area &rArr; gt_area_join
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_player_turn_prev
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_init_screen_home.o(.text.gt_init_screen_home)
</UL>
<P><STRONG><a name="[83]"></a>imgbtn6_1_cb</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gt_init_screen_home.o(.text.imgbtn6_1_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = imgbtn6_1_cb &rArr; gt_player_turn_prev &rArr; _turn_prev_item &rArr; _turn_next_item &rArr; gt_disp_invalid_area &rArr; _gt_disp_refr_append_area &rArr; gt_area_join
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt_player_turn_prev
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt_init_screen_home.o(.text.gt_init_screen_home)
</UL>
<P><STRONG><a name="[c8]"></a>GB2312Offset</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, gt_gui_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT_GetChinese
</UL>

<P><STRONG><a name="[cd]"></a>MD5Decode</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gt_gui_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Transform
</UL>

<P><STRONG><a name="[c5]"></a>MD5Encode</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, gt_gui_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MD5Encode
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Final
</UL>

<P><STRONG><a name="[c1]"></a>MD5Final</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, gt_gui_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = MD5Final &rArr; MD5Update &rArr; MD5Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Update
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Encode
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT_Font_Init
</UL>

<P><STRONG><a name="[bf]"></a>MD5Init</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, gt_gui_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT_Font_Init
</UL>

<P><STRONG><a name="[c4]"></a>MD5Transform</STRONG> (Thumb, 1876 bytes, Stack size 360 bytes, gt_gui_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = MD5Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Decode
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Update
</UL>

<P><STRONG><a name="[c0]"></a>MD5Update</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, gt_gui_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = MD5Update &rArr; MD5Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Transform
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT_Font_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Final
</UL>

<P><STRONG><a name="[228]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[227]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[22b]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[22a]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
